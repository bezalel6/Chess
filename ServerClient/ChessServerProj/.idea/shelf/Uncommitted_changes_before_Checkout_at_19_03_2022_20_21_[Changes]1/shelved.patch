Index: src/ver14/UsernameSuggestions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ver14;\r\n\r\nimport org.intellij.lang.annotations.Language;\r\nimport ver14.DB.DB;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.regex.MatchResult;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class UsernameSuggestions {\r\n\r\n    //todo make less of a O(no)\r\n    private static final int maxSuggestions = 10;\r\n    private static final int numOfIterationsPerOptionGroup = 10;\r\n    private static final MatchIterations preUnderscore = ((result, iteration) -> \"_\" + result.group());\r\n    private static final MatchIterations postUnderscore = ((result, iteration) -> result.group() + \"_\");\r\n    private static final MatchIterations bothUnderscore = ((result, iteration) -> \"_\" + result.group() + \"_\");\r\n    private static final MatchIterations upper = (matchGroup, i) -> matchGroup.group().toUpperCase();\r\n    private static final MatchIterations lower = (matchGroup, i) -> matchGroup.group().toLowerCase();\r\n\r\n\r\n    public static ArrayList<String> createSuggestions(String username) {\r\n        ArrayList<ArrayList<String>> options = new ArrayList<>();\r\n        options.addAll(createOptions(\"([0-9]+)|([0-9])\", username, (matchGroup, i) -> {\r\n            int num = Integer.parseInt(matchGroup.group()) + i;\r\n            return num + \"\";\r\n        }, (matchGroup, i) -> {\r\n            int num = Integer.parseInt(matchGroup.group()) - i;\r\n            return num + \"\";\r\n        }, preUnderscore, postUnderscore, bothUnderscore));\r\n        options.addAll(createOptions(\"([A-Z])\", username, preUnderscore, postUnderscore, bothUnderscore));\r\n        options.addAll(createOptions(\"(^[a-z])|(([0-9]|_)[a-z])\", username, upper, lower));\r\n\r\n        return createResults(options);\r\n    }\r\n\r\n    private static ArrayList<ArrayList<String>> createOptions(@Language(\"RegExp\") String regex, String username, MatchIterations... matchIterations) {\r\n        ArrayList<ArrayList<String>> options = new ArrayList<>();\r\n        Pattern pattern = Pattern.compile(regex);\r\n        pattern.matcher(username).results().forEach(match -> {\r\n            ArrayList<String>[] arr = new ArrayList[matchIterations.length];\r\n            Arrays.setAll(arr, i -> new ArrayList<>());\r\n\r\n            for (int i = 1; i <= numOfIterationsPerOptionGroup; i++) {\r\n                for (int j = 0; j < matchIterations.length; j++) {\r\n                    MatchIterations iterations = matchIterations[j];\r\n                    String currentIterationStr = iterations.createStr(match, i);\r\n                    String str = username.substring(0, match.start()).concat(currentIterationStr).concat(username.substring(match.end()));\r\n                    arr[j].add(str);\r\n                }\r\n            }\r\n            options.addAll(Arrays.stream(arr).toList());\r\n        });\r\n        return options;\r\n    }\r\n\r\n    private static ArrayList<String> createResults(ArrayList<ArrayList<String>> optionsLists) {\r\n        ArrayList<String> suggestions = new ArrayList<>();\r\n        int[] indices = new int[optionsLists.size()];\r\n        Arrays.fill(indices, 0);\r\n//        num of fully searched lists\r\n        int numOfSearchedLists = 0;\r\n        outer:\r\n        while (numOfSearchedLists < optionsLists.size()) {\r\n            for (int i = 0; i < optionsLists.size(); i++) {\r\n                ArrayList<String> options = optionsLists.get(i);\r\n                boolean keepSearching = true;\r\n                if (options.isEmpty()) {\r\n                    keepSearching = false;\r\n                    numOfSearchedLists++;\r\n                }\r\n                while (keepSearching && indices[i] < options.size()) {\r\n                    String suggestion = options.get(indices[i]++);\r\n                    if (!suggestions.contains(suggestion) && !DB.isUsernameExists(suggestion)) {\r\n                        suggestions.add(suggestion);\r\n                        if (suggestions.size() >= maxSuggestions) {\r\n                            break outer;\r\n                        }\r\n                        keepSearching = false;\r\n                    }\r\n                    if (indices[i] >= options.size()) {\r\n                        keepSearching = false;\r\n                        numOfSearchedLists++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return suggestions;\r\n\r\n    }\r\n\r\n    private interface MatchIterations {\r\n        /**\r\n         * @param iteration should start at 1\r\n         * @return\r\n         */\r\n        String createStr(MatchResult result, int iteration);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ver14/UsernameSuggestions.java b/src/ver14/UsernameSuggestions.java
--- a/src/ver14/UsernameSuggestions.java	
+++ b/src/ver14/UsernameSuggestions.java	
@@ -22,6 +22,7 @@
 
     public static ArrayList<String> createSuggestions(String username) {
         ArrayList<ArrayList<String>> options = new ArrayList<>();
+
         options.addAll(createOptions("([0-9]+)|([0-9])", username, (matchGroup, i) -> {
             int num = Integer.parseInt(matchGroup.group()) + i;
             return num + "";
@@ -29,7 +30,9 @@
             int num = Integer.parseInt(matchGroup.group()) - i;
             return num + "";
         }, preUnderscore, postUnderscore, bothUnderscore));
+
         options.addAll(createOptions("([A-Z])", username, preUnderscore, postUnderscore, bothUnderscore));
+        
         options.addAll(createOptions("(^[a-z])|(([0-9]|_)[a-z])", username, upper, lower));
 
         return createResults(options);
