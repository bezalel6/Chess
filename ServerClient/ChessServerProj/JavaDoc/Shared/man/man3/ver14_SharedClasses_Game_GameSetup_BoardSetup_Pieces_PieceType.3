.TH "ver14.SharedClasses.Game.GameSetup.BoardSetup.Pieces.PieceType" 3 "Sun Apr 24 2022" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ver14.SharedClasses.Game.GameSetup.BoardSetup.Pieces.PieceType
.SH SYNOPSIS
.br
.PP
.PP
Inherits Serializable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPieceType\fP (String \fBwhiteIcon\fP, String \fBblackIcon\fP, int \fBvalue\fP)"
.br
.ti -1c
.RI "\fBPieceType\fP (String \fBwhiteIcon\fP, String \fBblackIcon\fP, int \fBvalue\fP, boolean \fBisSliding\fP)"
.br
.ti -1c
.RI "String \fBgetWhitePieceFen\fP ()"
.br
.ti -1c
.RI "String \fBgetPieceIcon\fP (\fBPlayerColor\fP playerColor)"
.br
.ti -1c
.RI "boolean \fBcompareMovementType\fP (\fBPieceType\fP compareTo)"
.br
.ti -1c
.RI "String \fBgetPieceName\fP ()"
.br
.ti -1c
.RI "boolean \fBisAttack\fP (\fBDirection\fP direction, int maxDistance)"
.br
.ti -1c
.RI "\fBDirection\fP[] \fBgetAttackingDirections\fP ()"
.br
.ti -1c
.RI "\fBDirection\fP[] \fBgetWalkingDirections\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "\fB[static initializer]\fP"
.br
.ti -1c
.RI "static \fBPieceType\fP \fBgetPieceType\fP (int pieceType)"
.br
.ti -1c
.RI "static \fBDirection\fP[] \fBgetAttackingDirections\fP (\fBPieceType\fP pieceType)"
.br
.ti -1c
.RI "static boolean \fBcompareMovementType\fP (\fBPieceType\fP piece1Type, \fBPieceType\fP piece2Type)"
.br
.ti -1c
.RI "static boolean \fBisDiagonalPiece\fP (\fBPieceType\fP pieceType)"
.br
.ti -1c
.RI "static boolean \fBisLinePiece\fP (\fBPieceType\fP pieceType)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBPAWN\fP"
.br
.ti -1c
.RI "\fBROOK\fP =('♖', '♜', 500)"
.br
.ti -1c
.RI "\fBBISHOP\fP =('♗', '♝', 320)"
.br
.ti -1c
.RI "\fBKNIGHT\fP"
.br
.ti -1c
.RI "\fBQUEEN\fP =('♕', '♛', 900)"
.br
.ti -1c
.RI "\fBKING\fP"
.br
.ti -1c
.RI "final String \fBwhiteIcon\fP"
.br
.ti -1c
.RI "final String \fBblackIcon\fP"
.br
.ti -1c
.RI "final int \fBvalue\fP"
.br
.ti -1c
.RI "final boolean \fBisSliding\fP"
.br
.ti -1c
.RI "final int \fBasInt\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final int \fBNUM_OF_PIECE_TYPES\fP = 6"
.br
.ti -1c
.RI "static final \fBPieceType\fP[] \fBPIECE_TYPES\fP = new \fBPieceType\fP[\fBNUM_OF_PIECE_TYPES\fP]"
.br
.ti -1c
.RI "static final \fBPieceType\fP[] \fBUNIQUE_MOVES_PIECE_TYPES\fP = {\fBROOK\fP, \fBKNIGHT\fP, \fBBISHOP\fP, \fBPAWN\fP, \fBKING\fP}"
.br
.ti -1c
.RI "static final \fBPieceType\fP[] \fBMINOR_PIECES\fP = {\fBBISHOP\fP, \fBKNIGHT\fP}"
.br
.ti -1c
.RI "static final \fBPieceType\fP[] \fBMAJOR_PIECES\fP = {\fBQUEEN\fP, \fBROOK\fP}"
.br
.ti -1c
.RI "static final \fBPieceType\fP[] \fBCAN_PROMOTE_TO\fP = {\fBKNIGHT\fP, \fBROOK\fP, \fBBISHOP\fP, \fBQUEEN\fP}"
.br
.ti -1c
.RI "static final \fBPieceType\fP[] \fBATTACKING_PIECE_TYPES\fP = {\fBROOK\fP, \fBBISHOP\fP, \fBKNIGHT\fP, \fBPAWN\fP, \fBQUEEN\fP, \fBKING\fP}"
.br
.ti -1c
.RI "static final \fBDirection\fP[][] \fBATTACKING_DIRECTIONS\fP = new \fBDirection\fP[\fBNUM_OF_PIECE_TYPES\fP][]"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBPiece\fP type - represents the \fBPiece\fP Type \&.
.PP
\fBAuthor\fP
.RS 4
Bezalel Avrahami (bezalel3250@gmail.com) 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "boolean ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.compareMovementType (\fBPieceType\fP compareTo)"
Compare movement type boolean\&.
.PP
\fBParameters\fP
.RS 4
\fIcompareTo\fP the compare to 
.RE
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SS "static boolean ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.compareMovementType (\fBPieceType\fP piece1Type, \fBPieceType\fP piece2Type)\fC [static]\fP"
Compare movement type boolean\&.
.PP
\fBParameters\fP
.RS 4
\fIpiece1Type\fP the piece 1 type 
.br
\fIpiece2Type\fP the piece 2 type 
.RE
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SS "\fBDirection\fP[] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.getAttackingDirections ()"
Get attacking directions direction [ ]\&.
.PP
\fBReturns\fP
.RS 4
the direction [ ] 
.RE
.PP

.SS "static \fBDirection\fP[] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.getAttackingDirections (\fBPieceType\fP pieceType)\fC [static]\fP"
Get attacking directions direction [ ]\&.
.PP
\fBParameters\fP
.RS 4
\fIpieceType\fP the piece type 
.RE
.PP
\fBReturns\fP
.RS 4
the direction [ ] 
.RE
.PP

.SS "String ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.getPieceIcon (\fBPlayerColor\fP playerColor)"
Gets piece icon\&.
.PP
\fBParameters\fP
.RS 4
\fIplayerColor\fP the player color 
.RE
.PP
\fBReturns\fP
.RS 4
the piece icon 
.RE
.PP

.SS "String ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.getPieceName ()"
Gets piece name\&.
.PP
\fBReturns\fP
.RS 4
the piece name 
.RE
.PP

.SS "static \fBPieceType\fP ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.getPieceType (int pieceType)\fC [static]\fP"
Gets piece type\&.
.PP
\fBParameters\fP
.RS 4
\fIpieceType\fP the piece type 
.RE
.PP
\fBReturns\fP
.RS 4
the piece type 
.RE
.PP

.SS "\fBDirection\fP[] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.getWalkingDirections ()"
Get walking directions direction [ ]\&.
.PP
\fBReturns\fP
.RS 4
the direction [ ] 
.RE
.PP

.SS "String ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.getWhitePieceFen ()"
Gets white piece fen\&.
.PP
\fBReturns\fP
.RS 4
the white piece fen 
.RE
.PP

.SS "boolean ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.isAttack (\fBDirection\fP direction, int maxDistance)"
Is attack boolean\&.
.PP
\fBParameters\fP
.RS 4
\fIdirection\fP the direction 
.br
\fImaxDistance\fP the max distance 
.RE
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SS "static boolean ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.isDiagonalPiece (\fBPieceType\fP pieceType)\fC [static]\fP"
Is diagonal piece boolean\&.
.PP
\fBParameters\fP
.RS 4
\fIpieceType\fP the piece type 
.RE
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SS "static boolean ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.isLinePiece (\fBPieceType\fP pieceType)\fC [static]\fP"
Is line piece boolean\&.
.PP
\fBParameters\fP
.RS 4
\fIpieceType\fP the piece type 
.RE
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "final int ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.asInt"
The As int\&. 
.SS " final \fBDirection\fP [][] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.ATTACKING_DIRECTIONS = new \fBDirection\fP[\fBNUM_OF_PIECE_TYPES\fP][]\fC [static]\fP"
The Attacking directions\&. each piece type has its own set of attacking direction\&. 
.SS " final \fBPieceType\fP [] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.ATTACKING_PIECE_TYPES = {\fBROOK\fP, \fBBISHOP\fP, \fBKNIGHT\fP, \fBPAWN\fP, \fBQUEEN\fP, \fBKING\fP}\fC [static]\fP"
The constant ATTACKING_PIECE_TYPES\&. 
.SS "ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.BISHOP =('♗', '♝', 320)"
Bishop piece type\&. 
.SS "final String ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.blackIcon"
The Black icon\&. 
.SS " final \fBPieceType\fP [] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.CAN_PROMOTE_TO = {\fBKNIGHT\fP, \fBROOK\fP, \fBBISHOP\fP, \fBQUEEN\fP}\fC [static]\fP"
The types of pieces a pawn Can promote to\&. 
.SS "final boolean ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.isSliding"
The Is sliding\&. 
.SS "ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.KING"
\fBInitial value:\fP
.PP
.nf
=("♔", "♚", 20000000, false) {
        @Override
        public boolean isAttack(Direction direction, int maxDistance) {
            return maxDistance == 1 && super\&.isAttack(direction, maxDistance);
        }
    }
.fi
The King\&. 
.SS "ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.KNIGHT"
\fBInitial value:\fP
.PP
.nf
=("♘", "♞", 310, false) {
        @Override
        public boolean isAttack(Direction direction, int maxDistance) {
            return maxDistance == 2 && super\&.isAttack(direction, maxDistance);
        }
    }
.fi
The Knight\&. 
.SS " final \fBPieceType\fP [] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.MAJOR_PIECES = {\fBQUEEN\fP, \fBROOK\fP}\fC [static]\fP"
The Major pieces\&. 
.SS " final \fBPieceType\fP [] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.MINOR_PIECES = {\fBBISHOP\fP, \fBKNIGHT\fP}\fC [static]\fP"
The Minor pieces\&. 
.SS " final int ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.NUM_OF_PIECE_TYPES = 6\fC [static]\fP"
The constant NUM_OF_PIECE_TYPES\&. 
.SS "ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.PAWN"
\fBInitial value:\fP
.PP
.nf
=("♙", "♟", 100, false) {
        @Override
        public boolean isAttack(Direction direction, int maxDistance) {
            return maxDistance == 1 && super\&.isAttack(direction, maxDistance);
        }

        @Override
        public Direction[] getWalkingDirections() {
            return ArrUtils\&.concat(super\&.getWalkingDirections(), Direction\&.U, Direction\&.U_U);
        }
    }
.fi
Pawn \fBPiece\fP Type\&. 
.SS " final \fBPieceType\fP [] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.PIECE_TYPES = new \fBPieceType\fP[\fBNUM_OF_PIECE_TYPES\fP]\fC [static]\fP"
The constant PIECE_TYPES\&. 
.SS "ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.QUEEN =('♕', '♛', 900)"
Queen piece type\&. 
.SS "ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.ROOK =('♖', '♜', 500)"
Rook piece type\&. 
.SS " final \fBPieceType\fP [] ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.UNIQUE_MOVES_PIECE_TYPES = {\fBROOK\fP, \fBKNIGHT\fP, \fBBISHOP\fP, \fBPAWN\fP, \fBKING\fP}\fC [static]\fP"
The Unique moves piece types\&. 
.SS "final int ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.value"
The Value\&. 
.SS "final String ver14\&.SharedClasses\&.Game\&.GameSetup\&.BoardSetup\&.Pieces\&.PieceType\&.whiteIcon"
The White icon\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
