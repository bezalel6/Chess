.TH "ver14.SharedClasses.Game.Location" 3 "Sun Apr 24 2022" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ver14.SharedClasses.Game.Location
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLocation\fP ()"
.br
.ti -1c
.RI "String \fBmatrixStr\fP ()"
.br
.ti -1c
.RI "String \fBgetColString\fP ()"
.br
.ti -1c
.RI "\fBLocation\fP \fBflip\fP ()"
.br
.ti -1c
.RI "boolean \fBisBlackSquare\fP ()"
.br
.ti -1c
.RI "boolean \fBisWhiteSquare\fP ()"
.br
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.ti -1c
.RI "int \fBgetMaxDistance\fP (\fBLocation\fP other)"
.br
.ti -1c
.RI "String \fBgetRowString\fP ()"
.br
.ti -1c
.RI "int \fBhash\fP (\fBPieceType\fP pieceType)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "\fB[static initializer]\fP"
.br
.ti -1c
.RI "static String \fBlocsMatStr\fP ()"
.br
.ti -1c
.RI "static \fBLocation\fP[][] \fBlocsMat\fP ()"
.br
.ti -1c
.RI "static String \fBcreateMatIndicesStr\fP ()"
.br
.ti -1c
.RI "static \fBLocation\fP \fBgetLoc\fP (\fBLocation\fP loc, \fBDirection\fP direction)"
.br
.ti -1c
.RI "static \fBLocation\fP \fBgetLoc\fP (\fBLocation\fP loc, int numOfMult, \fBDirection\fP direction)"
.br
.ti -1c
.RI "static \fBLocation\fP \fBgetLoc\fP (\fBLocation\fP loc, int add)"
.br
.ti -1c
.RI "static \fBLocation\fP \fBgetLoc\fP (int locIndex)"
.br
.ti -1c
.RI "static \fBLocation\fP \fBvalueOf\fP (int locIndex)"
.br
.ti -1c
.RI "static \fBLocation\fP \fBgetLoc\fP (String str)"
.br
.ti -1c
.RI "static \fBLocation\fP \fBgetLoc\fP (int \fBrow\fP, int \fBcol\fP)"
.br
.ti -1c
.RI "static \fBLocation\fP \fBgetLoc\fP (int \fBrow\fP, int \fBcol\fP, boolean \fBflip\fP)"
.br
.ti -1c
.RI "static int \fBflip\fP (int num)"
.br
.ti -1c
.RI "static boolean \fBisInBounds\fP (\fBLocation\fP loc)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBA8\fP"
.br
.ti -1c
.RI "\fBB8\fP"
.br
.ti -1c
.RI "\fBC8\fP"
.br
.ti -1c
.RI "\fBD8\fP"
.br
.ti -1c
.RI "\fBE8\fP"
.br
.ti -1c
.RI "\fBF8\fP"
.br
.ti -1c
.RI "\fBG8\fP"
.br
.ti -1c
.RI "\fBH8\fP"
.br
.ti -1c
.RI "\fBA7\fP"
.br
.ti -1c
.RI "\fBB7\fP"
.br
.ti -1c
.RI "\fBC7\fP"
.br
.ti -1c
.RI "\fBD7\fP"
.br
.ti -1c
.RI "\fBE7\fP"
.br
.ti -1c
.RI "\fBF7\fP"
.br
.ti -1c
.RI "\fBG7\fP"
.br
.ti -1c
.RI "\fBH7\fP"
.br
.ti -1c
.RI "\fBA6\fP"
.br
.ti -1c
.RI "\fBB6\fP"
.br
.ti -1c
.RI "\fBC6\fP"
.br
.ti -1c
.RI "\fBD6\fP"
.br
.ti -1c
.RI "\fBE6\fP"
.br
.ti -1c
.RI "\fBF6\fP"
.br
.ti -1c
.RI "\fBG6\fP"
.br
.ti -1c
.RI "\fBH6\fP"
.br
.ti -1c
.RI "\fBA5\fP"
.br
.ti -1c
.RI "\fBB5\fP"
.br
.ti -1c
.RI "\fBC5\fP"
.br
.ti -1c
.RI "\fBD5\fP"
.br
.ti -1c
.RI "\fBE5\fP"
.br
.ti -1c
.RI "\fBF5\fP"
.br
.ti -1c
.RI "\fBG5\fP"
.br
.ti -1c
.RI "\fBH5\fP"
.br
.ti -1c
.RI "\fBA4\fP"
.br
.ti -1c
.RI "\fBB4\fP"
.br
.ti -1c
.RI "\fBC4\fP"
.br
.ti -1c
.RI "\fBD4\fP"
.br
.ti -1c
.RI "\fBE4\fP"
.br
.ti -1c
.RI "\fBF4\fP"
.br
.ti -1c
.RI "\fBG4\fP"
.br
.ti -1c
.RI "\fBH4\fP"
.br
.ti -1c
.RI "\fBA3\fP"
.br
.ti -1c
.RI "\fBB3\fP"
.br
.ti -1c
.RI "\fBC3\fP"
.br
.ti -1c
.RI "\fBD3\fP"
.br
.ti -1c
.RI "\fBE3\fP"
.br
.ti -1c
.RI "\fBF3\fP"
.br
.ti -1c
.RI "\fBG3\fP"
.br
.ti -1c
.RI "\fBH3\fP"
.br
.ti -1c
.RI "\fBA2\fP"
.br
.ti -1c
.RI "\fBB2\fP"
.br
.ti -1c
.RI "\fBC2\fP"
.br
.ti -1c
.RI "\fBD2\fP"
.br
.ti -1c
.RI "\fBE2\fP"
.br
.ti -1c
.RI "\fBF2\fP"
.br
.ti -1c
.RI "\fBG2\fP"
.br
.ti -1c
.RI "\fBH2\fP"
.br
.ti -1c
.RI "\fBA1\fP"
.br
.ti -1c
.RI "\fBB1\fP"
.br
.ti -1c
.RI "\fBC1\fP"
.br
.ti -1c
.RI "\fBD1\fP"
.br
.ti -1c
.RI "\fBE1\fP"
.br
.ti -1c
.RI "\fBF1\fP"
.br
.ti -1c
.RI "\fBG1\fP"
.br
.ti -1c
.RI "\fBH1\fP"
.br
.ti -1c
.RI "final long \fBasLong\fP"
.br
.ti -1c
.RI "final int \fBasInt\fP"
.br
.ti -1c
.RI "final int \fBrow\fP"
.br
.ti -1c
.RI "final int \fBcol\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final int \fBA\fP = A1\&.col"
.br
.ti -1c
.RI "static final int \fBB\fP = B1\&.col"
.br
.ti -1c
.RI "static final int \fBC\fP = C1\&.col"
.br
.ti -1c
.RI "static final int \fBD\fP = D1\&.col"
.br
.ti -1c
.RI "static final int \fBE\fP = E1\&.col"
.br
.ti -1c
.RI "static final int \fBF\fP = F1\&.col"
.br
.ti -1c
.RI "static final int \fBG\fP = G1\&.col"
.br
.ti -1c
.RI "static final int \fBH\fP = H1\&.col"
.br
.ti -1c
.RI "static final ArrayList< \fBLocation\fP > \fBALL_LOCS\fP"
.br
.ti -1c
.RI "static final int \fBNUM_OF_SQUARES\fP = 64"
.br
.ti -1c
.RI "static final int \fBKING_STARTING_COL\fP = E1\&.col"
.br
.ti -1c
.RI "static final int \fBWHITE_STARTING_ROW\fP = E1\&.row"
.br
.ti -1c
.RI "static final int \fBBLACK_STARTING_ROW\fP = \fBflip\fP(WHITE_STARTING_ROW)"
.br
.ti -1c
.RI "static final int \fBWHITE_DIFF\fP = WHITE_STARTING_ROW > BLACK_STARTING_ROW ? \-1 : 1"
.br
.ti -1c
.RI "static final int \fBBLACK_DIFF\fP = \-WHITE_DIFF"
.br
.ti -1c
.RI "static final \fBPlayerColor\fP \fBnormalPerspective\fP = \fBPlayerColor\&.WHITE\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBLocation\fP - an enum consisting of 64 values representing all 64 squares on the board\&. used to access squares on the board 
.br
an enum is used for performance reasons\&.
.PP
\fBAuthor\fP
.RS 4
Bezalel Avrahami (bezalel3250@gmail.com) 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "ver14\&.SharedClasses\&.Game\&.Location\&.Location ()"
Instantiates a new \fBLocation\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "static String ver14\&.SharedClasses\&.Game\&.Location\&.createMatIndicesStr ()\fC [static]\fP"
Create mat indices str string\&.
.PP
\fBReturns\fP
.RS 4
the string 
.RE
.PP

.SS "\fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.flip ()"
Flip location\&.
.PP
\fBReturns\fP
.RS 4
the location 
.RE
.PP

.SS "static int ver14\&.SharedClasses\&.Game\&.Location\&.flip (int num)\fC [static]\fP"
Flip int\&.
.PP
\fBParameters\fP
.RS 4
\fInum\fP the num 
.RE
.PP
\fBReturns\fP
.RS 4
the int 
.RE
.PP

.SS "String ver14\&.SharedClasses\&.Game\&.Location\&.getColString ()"
Gets col string\&.
.PP
\fBReturns\fP
.RS 4
the col string 
.RE
.PP

.SS "static \fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.getLoc (int locIndex)\fC [static]\fP"
Gets location corresponding to the locIndex provided (0\&.\&.63)
.PP
\fBParameters\fP
.RS 4
\fIlocIndex\fP the locIndex 
.RE
.PP
\fBReturns\fP
.RS 4
the location if the provided index is inside the bounds(0\&.\&.\&.63)\&. null otherwise 
.RE
.PP

.SS "static \fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.getLoc (int row, int col)\fC [static]\fP"
Gets loc\&.
.PP
\fBParameters\fP
.RS 4
\fIrow\fP the row 
.br
\fIcol\fP the col 
.RE
.PP
\fBReturns\fP
.RS 4
the loc 
.RE
.PP

.SS "static \fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.getLoc (int row, int col, boolean flip)\fC [static]\fP"
Gets loc\&.
.PP
\fBParameters\fP
.RS 4
\fIrow\fP the row 
.br
\fIcol\fP the col 
.br
\fIflip\fP the flip 
.RE
.PP
\fBReturns\fP
.RS 4
the loc 
.RE
.PP

.SS "static \fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.getLoc (\fBLocation\fP loc, \fBDirection\fP direction)\fC [static]\fP"
Gets the location relative to loc in the direction
.PP
\fBParameters\fP
.RS 4
\fIloc\fP the loc 
.br
\fIdirection\fP the direction 
.RE
.PP
\fBReturns\fP
.RS 4
the location if the calculated index is inside the bounds(0\&.\&.\&.63)\&. null otherwise 
.RE
.PP

.SS "static \fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.getLoc (\fBLocation\fP loc, int add)\fC [static]\fP"
Gets the location that is exactly add squares from loc NOTE: add should be in bitboard format
.PP
\fBParameters\fP
.RS 4
\fIloc\fP the loc 
.br
\fIadd\fP the number of squares to add 
.RE
.PP
\fBReturns\fP
.RS 4
the location if the calculated index is inside the bounds(0\&.\&.\&.63)\&. null otherwise 
.RE
.PP
\fBSee also\fP
.RS 4
ver14\&.Model\&.Bitboard 
.RE
.PP

.SS "static \fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.getLoc (\fBLocation\fP loc, int numOfMult, \fBDirection\fP direction)\fC [static]\fP"
Gets the location relative to loc in the direction given and the distance is determined by the numOfMult
.PP
\fBParameters\fP
.RS 4
\fIloc\fP the loc 
.br
\fInumOfMult\fP the num of mult 
.br
\fIdirection\fP the direction 
.RE
.PP
\fBReturns\fP
.RS 4
the location if the calculated index is inside the bounds(0\&.\&.\&.63)\&. null otherwise 
.RE
.PP

.SS "static \fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.getLoc (String str)\fC [static]\fP"
gets the location corresponding to the provided location string\&.
.PP
\fBParameters\fP
.RS 4
\fIstr\fP the square's coordinate according to the Algebraic notation 
.RE
.PP
\fBReturns\fP
.RS 4
the loc if given str is valid\&. null otherwise 
.RE
.PP
\fBSee also\fP
.RS 4
\fC\&.\&.\&.\fP 
.RE
.PP

.SS "int ver14\&.SharedClasses\&.Game\&.Location\&.getMaxDistance (\fBLocation\fP other)"
Gets max distance\&.
.PP
\fBParameters\fP
.RS 4
\fIother\fP the other 
.RE
.PP
\fBReturns\fP
.RS 4
the max distance 
.RE
.PP

.SS "String ver14\&.SharedClasses\&.Game\&.Location\&.getRowString ()"
Gets row string\&.
.PP
\fBReturns\fP
.RS 4
the row string 
.RE
.PP

.SS "int ver14\&.SharedClasses\&.Game\&.Location\&.hash (\fBPieceType\fP pieceType)"
Hash int\&.
.PP
\fBParameters\fP
.RS 4
\fIpieceType\fP the piece type 
.RE
.PP
\fBReturns\fP
.RS 4
the int 
.RE
.PP

.SS "boolean ver14\&.SharedClasses\&.Game\&.Location\&.isBlackSquare ()"
Is black square boolean\&.
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SS "static boolean ver14\&.SharedClasses\&.Game\&.Location\&.isInBounds (\fBLocation\fP loc)\fC [static]\fP"
Is in bounds boolean\&.
.PP
\fBParameters\fP
.RS 4
\fIloc\fP the loc 
.RE
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SS "boolean ver14\&.SharedClasses\&.Game\&.Location\&.isWhiteSquare ()"
Is white square boolean\&.
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SS "static \fBLocation\fP[][] ver14\&.SharedClasses\&.Game\&.Location\&.locsMat ()\fC [static]\fP"
Locs mat location [ ] [ ]\&.
.PP
\fBReturns\fP
.RS 4
the location [ ] [ ] 
.RE
.PP

.SS "static String ver14\&.SharedClasses\&.Game\&.Location\&.locsMatStr ()\fC [static]\fP"
Locs mat str string\&.
.PP
\fBReturns\fP
.RS 4
the string 
.RE
.PP

.SS "String ver14\&.SharedClasses\&.Game\&.Location\&.matrixStr ()"
Matrix str string\&.
.PP
\fBReturns\fP
.RS 4
the string 
.RE
.PP

.SS "String ver14\&.SharedClasses\&.Game\&.Location\&.toString ()"
To string string\&.
.PP
\fBReturns\fP
.RS 4
the string 
.RE
.PP

.SS "static \fBLocation\fP ver14\&.SharedClasses\&.Game\&.Location\&.valueOf (int locIndex)\fC [static]\fP"
Value of location\&.
.PP
\fBParameters\fP
.RS 4
\fIlocIndex\fP the locIndex 
.RE
.PP
\fBReturns\fP
.RS 4
the location if the provided index is inside the bounds(0\&.\&.\&.63)\&. null otherwise 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "final int ver14\&.SharedClasses\&.Game\&.Location\&.asInt"
the calculated index 
.SS "final long ver14\&.SharedClasses\&.Game\&.Location\&.asLong"
a long value with a bit set on this location 
.SS "final int ver14\&.SharedClasses\&.Game\&.Location\&.col"
this location's column 
.SS "final int ver14\&.SharedClasses\&.Game\&.Location\&.row"
this location's row 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
