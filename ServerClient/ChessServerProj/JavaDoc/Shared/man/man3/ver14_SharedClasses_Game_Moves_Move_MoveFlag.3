.TH "ver14.SharedClasses.Game.Moves.Move.MoveFlag" 3 "Sun Apr 24 2022" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ver14.SharedClasses.Game.Moves.Move.MoveFlag
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMoveFlag\fP ()"
.br
.ti -1c
.RI "\fBMoveFlag\fP (CastlingRights\&.Side side)"
.br
.ti -1c
.RI "boolean \fBequals\fP (\fBMove\fP myMove, \fBMove\fP otherMove)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "\fB[static initializer]\fP"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBNormalMove\fP"
.br
.ti -1c
.RI "\fBEnPassant\fP"
.br
.ti -1c
.RI "\fBDoublePawnPush\fP"
.br
.ti -1c
.RI "\fBPromotion\fP"
.br
.ti -1c
.RI "\fBShortCastle\fP =(\fBCastlingRights\&.Side\&.KING\fP)"
.br
.ti -1c
.RI "\fBLongCastle\fP =(\fBCastlingRights\&.Side\&.QUEEN\fP)"
.br
.ti -1c
.RI "final boolean \fBisCastling\fP"
.br
.ti -1c
.RI "final CastlingRights\&.Side \fBcastlingSide\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final \fBMoveFlag\fP[] \fBCASTLING_FLAGS\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBMove\fP flag - which type of move this is\&.
.PP
\fBAuthor\fP
.RS 4
Bezalel Avrahami (bezalel3250@gmail.com) 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.MoveFlag ()"
Instantiates a new \fBMove\fP flag\&. 
.SS "ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.MoveFlag (CastlingRights\&.Side side)"
Instantiates a new \fBMove\fP flag\&.
.PP
\fBParameters\fP
.RS 4
\fIside\fP the side 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "boolean ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.equals (\fBMove\fP myMove, \fBMove\fP otherMove)"
checks if the flags are equals\&.
.PP
\fBParameters\fP
.RS 4
\fImyMove\fP the my move 
.br
\fIotherMove\fP the other move 
.RE
.PP
\fBReturns\fP
.RS 4
the boolean 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "final \fBMoveFlag\fP [] ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.CASTLING_FLAGS\fC [static]\fP"
The Castling flags\&. 
.SS "final CastlingRights\&.Side ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.castlingSide"
if this is a castling flag, which side is it\&. 
.SS "ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.DoublePawnPush"
Double pawn push move flag\&. 
.SS "ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.EnPassant"
En passant move flag\&. 
.SS "final boolean ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.isCastling"
Is this move flag a castling flag\&. 
.SS "ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.LongCastle =(\fBCastlingRights\&.Side\&.QUEEN\fP)"
Long castle move flag\&. 
.SS "ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.NormalMove"
Normal move move flag\&. 
.SS "ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.Promotion"
\fBInitial value:\fP
.PP
.nf
={
            @Override
            public boolean equals(Move myMove, Move otherMove) {
                return super\&.equals(myMove, otherMove) && myMove\&.getPromotingTo() == otherMove\&.getPromotingTo();
            }
        }
.fi
The Promotion\&. 
.SS "ver14\&.SharedClasses\&.Game\&.Moves\&.Move\&.MoveFlag\&.ShortCastle =(\fBCastlingRights\&.Side\&.KING\fP)"
Short castle move flag\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
