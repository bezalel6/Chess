{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
bitboard.h\par \pard\plain 
{\tc\tcl2 \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/bitboard.h}
{\xe \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/bitboard.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 /*}\par
2 {\cf20   Stockfish, a UCI chess playing engine derived from Glaurung 2.1}\par
3 {\cf20   Copyright (C) 2004-2021 The Stockfish developers (see AUTHORS file)}\par
4 {\cf20 }\par
5 {\cf20   Stockfish is free software: you can redistribute it and/or modify}\par
6 {\cf20   it under the terms of the GNU General Public License as published by}\par
7 {\cf20   the Free Software Foundation, either version 3 of the License, or}\par
8 {\cf20   (at your option) any later version.}\par
9 {\cf20 }\par
10 {\cf20   Stockfish is distributed in the hope that it will be useful,}\par
11 {\cf20   but WITHOUT ANY WARRANTY; without even the implied warranty of}\par
12 {\cf20   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the}\par
13 {\cf20   GNU General Public License for more details.}\par
14 {\cf20 }\par
15 {\cf20   You should have received a copy of the GNU General Public License}\par
16 {\cf20   along with this program.  If not, see <http://www.gnu.org/licenses/>.}\par
17 {\cf20 */}\par
18 \par
19 {\cf21 #ifndef BITBOARD_H_INCLUDED}\par
20 {\cf21 #define BITBOARD_H_INCLUDED}\par
21 \par
22 {\cf21 #include <string>}\par
23 \par
24 {\cf21 #include "types.h"}\par
25 \par
26 {\cf17 namespace }Stockfish \{\par
27 \par
28 {\cf17 namespace }Bitbases \{\par
29 \par
30 {\cf18 void} init();\par
31 {\cf18 bool} probe(Square wksq, Square wpsq, Square bksq, Color us);\par
32 \par
33 \} {\cf20 // namespace Stockfish::Bitbases}\par
34 \par
35 {\cf17 namespace }Bitboards \{\par
36 \par
37 {\cf18 void} init();\par
38 std::string pretty(Bitboard b);\par
39 \par
40 \} {\cf20 // namespace Stockfish::Bitboards}\par
41 \par
42 {\cf17 constexpr} Bitboard AllSquares = ~Bitboard(0);\par
43 {\cf17 constexpr} Bitboard DarkSquares = 0xAA55AA55AA55AA55ULL;\par
44 \par
45 {\cf17 constexpr} Bitboard FileABB = 0x0101010101010101ULL;\par
46 {\cf17 constexpr} Bitboard FileBBB = FileABB << 1;\par
47 {\cf17 constexpr} Bitboard FileCBB = FileABB << 2;\par
48 {\cf17 constexpr} Bitboard FileDBB = FileABB << 3;\par
49 {\cf17 constexpr} Bitboard FileEBB = FileABB << 4;\par
50 {\cf17 constexpr} Bitboard FileFBB = FileABB << 5;\par
51 {\cf17 constexpr} Bitboard FileGBB = FileABB << 6;\par
52 {\cf17 constexpr} Bitboard FileHBB = FileABB << 7;\par
53 \par
54 {\cf17 constexpr} Bitboard Rank1BB = 0xFF;\par
55 {\cf17 constexpr} Bitboard Rank2BB = Rank1BB << (8 * 1);\par
56 {\cf17 constexpr} Bitboard Rank3BB = Rank1BB << (8 * 2);\par
57 {\cf17 constexpr} Bitboard Rank4BB = Rank1BB << (8 * 3);\par
58 {\cf17 constexpr} Bitboard Rank5BB = Rank1BB << (8 * 4);\par
59 {\cf17 constexpr} Bitboard Rank6BB = Rank1BB << (8 * 5);\par
60 {\cf17 constexpr} Bitboard Rank7BB = Rank1BB << (8 * 6);\par
61 {\cf17 constexpr} Bitboard Rank8BB = Rank1BB << (8 * 7);\par
62 \par
63 {\cf17 constexpr} Bitboard QueenSide   = FileABB | FileBBB | FileCBB | FileDBB;\par
64 {\cf17 constexpr} Bitboard CenterFiles = FileCBB | FileDBB | FileEBB | FileFBB;\par
65 {\cf17 constexpr} Bitboard KingSide    = FileEBB | FileFBB | FileGBB | FileHBB;\par
66 {\cf17 constexpr} Bitboard Center      = (FileDBB | FileEBB) & (Rank4BB | Rank5BB);\par
67 \par
68 {\cf17 constexpr} Bitboard KingFlank[FILE_NB] = \{\par
69   QueenSide ^ FileDBB, QueenSide, QueenSide,\par
70   CenterFiles, CenterFiles,\par
71   KingSide, KingSide, KingSide ^ FileEBB\par
72 \};\par
73 \par
74 {\cf17 extern} uint8_t PopCnt16[1 << 16];\par
75 {\cf17 extern} uint8_t SquareDistance[SQUARE_NB][SQUARE_NB];\par
76 \par
77 {\cf17 extern} Bitboard SquareBB[SQUARE_NB];\par
78 {\cf17 extern} Bitboard BetweenBB[SQUARE_NB][SQUARE_NB];\par
79 {\cf17 extern} Bitboard LineBB[SQUARE_NB][SQUARE_NB];\par
80 {\cf17 extern} Bitboard PseudoAttacks[PIECE_TYPE_NB][SQUARE_NB];\par
81 {\cf17 extern} Bitboard PawnAttacks[COLOR_NB][SQUARE_NB];\par
82 \par
83 \par
85 {\cf17 struct }Magic \{\par
86   Bitboard  mask;\par
87   Bitboard  magic;\par
88   Bitboard* attacks;\par
89   {\cf18 unsigned}  shift;\par
90 \par
91   {\cf20 // Compute the attack's index using the 'magic bitboards' approach}\par
92   {\cf18 unsigned} index(Bitboard occupied){\cf17  const }\{\par
93 \par
94     {\cf19 if} (HasPext)\par
95         {\cf19 return} unsigned(pext(occupied, mask));\par
96 \par
97     {\cf19 if} (Is64Bit)\par
98         {\cf19 return} unsigned(((occupied & mask) * magic) >> shift);\par
99 \par
100     {\cf18 unsigned} lo = unsigned(occupied) & unsigned(mask);\par
101     {\cf18 unsigned} hi = unsigned(occupied >> 32) & unsigned(mask >> 32);\par
102     {\cf19 return} (lo * {\cf18 unsigned}(magic) ^ hi * {\cf18 unsigned}(magic >> 32)) >> shift;\par
103   \}\par
104 \};\par
105 \par
106 {\cf17 extern} Magic RookMagics[SQUARE_NB];\par
107 {\cf17 extern} Magic BishopMagics[SQUARE_NB];\par
108 \par
109 {\cf17 inline} Bitboard square_bb(Square s) \{\par
110   assert(is_ok(s));\par
111   {\cf19 return} SquareBB[s];\par
112 \}\par
113 \par
114 \par
117 \par
118 {\cf17 inline} Bitboard  operator&( Bitboard  b, Square s) \{ {\cf19 return} b &  square_bb(s); \}\par
119 {\cf17 inline} Bitboard  operator|( Bitboard  b, Square s) \{ {\cf19 return} b |  square_bb(s); \}\par
120 {\cf17 inline} Bitboard  operator^( Bitboard  b, Square s) \{ {\cf19 return} b ^  square_bb(s); \}\par
121 {\cf17 inline} Bitboard& operator|=(Bitboard& b, Square s) \{ {\cf19 return} b |= square_bb(s); \}\par
122 {\cf17 inline} Bitboard& operator^=(Bitboard& b, Square s) \{ {\cf19 return} b ^= square_bb(s); \}\par
123 \par
124 {\cf17 inline} Bitboard  operator&(Square s, Bitboard b) \{ {\cf19 return} b & s; \}\par
125 {\cf17 inline} Bitboard  operator|(Square s, Bitboard b) \{ {\cf19 return} b | s; \}\par
126 {\cf17 inline} Bitboard  operator^(Square s, Bitboard b) \{ {\cf19 return} b ^ s; \}\par
127 \par
128 {\cf17 inline} Bitboard  operator|(Square s1, Square s2) \{ {\cf19 return} square_bb(s1) | s2; \}\par
129 \par
130 {\cf17 constexpr} {\cf18 bool} more_than_one(Bitboard b) \{\par
131   {\cf19 return} b & (b - 1);\par
132 \}\par
133 \par
134 \par
135 {\cf17 constexpr} {\cf18 bool} opposite_colors(Square s1, Square s2) \{\par
136   {\cf19 return} (s1 + rank_of(s1) + s2 + rank_of(s2)) & 1;\par
137 \}\par
138 \par
139 \par
142 \par
143 {\cf17 constexpr} Bitboard rank_bb(Rank r) \{\par
144   {\cf19 return} Rank1BB << (8 * r);\par
145 \}\par
146 \par
147 {\cf17 constexpr} Bitboard rank_bb(Square s) \{\par
148   {\cf19 return} rank_bb(rank_of(s));\par
149 \}\par
150 \par
151 {\cf17 constexpr} Bitboard file_bb(File f) \{\par
152   {\cf19 return} FileABB << f;\par
153 \}\par
154 \par
155 {\cf17 constexpr} Bitboard file_bb(Square s) \{\par
156   {\cf19 return} file_bb(file_of(s));\par
157 \}\par
158 \par
159 \par
161 \par
162 {\cf17 template}<Direction D>\par
163 {\cf17 constexpr} Bitboard shift(Bitboard b) \{\par
164   {\cf19 return}  D == NORTH      ?  b             << 8 : D == SOUTH      ?  b             >> 8\par
165         : D == NORTH+NORTH?  b             <<16 : D == SOUTH+SOUTH?  b             >>16\par
166         : D == EAST       ? (b & ~FileHBB) << 1 : D == WEST       ? (b & ~FileABB) >> 1\par
167         : D == NORTH_EAST ? (b & ~FileHBB) << 9 : D == NORTH_WEST ? (b & ~FileABB) << 7\par
168         : D == SOUTH_EAST ? (b & ~FileHBB) >> 7 : D == SOUTH_WEST ? (b & ~FileABB) >> 9\par
169         : 0;\par
170 \}\par
171 \par
172 \par
175 \par
176 {\cf17 template}<Color C>\par
177 {\cf17 constexpr} Bitboard pawn_attacks_bb(Bitboard b) \{\par
178   {\cf19 return} C == WHITE ? shift<NORTH_WEST>(b) | shift<NORTH_EAST>(b)\par
179                     : shift<SOUTH_WEST>(b) | shift<SOUTH_EAST>(b);\par
180 \}\par
181 \par
182 {\cf17 inline} Bitboard pawn_attacks_bb(Color c, Square s) \{\par
183 \par
184   assert(is_ok(s));\par
185   {\cf19 return} PawnAttacks[c][s];\par
186 \}\par
187 \par
188 \par
191 \par
192 {\cf17 template}<Color C>\par
193 {\cf17 constexpr} Bitboard pawn_double_attacks_bb(Bitboard b) \{\par
194   {\cf19 return} C == WHITE ? shift<NORTH_WEST>(b) & shift<NORTH_EAST>(b)\par
195                     : shift<SOUTH_WEST>(b) & shift<SOUTH_EAST>(b);\par
196 \}\par
197 \par
198 \par
201 \par
202 {\cf17 constexpr} Bitboard adjacent_files_bb(Square s) \{\par
203   {\cf19 return} shift<EAST>(file_bb(s)) | shift<WEST>(file_bb(s));\par
204 \}\par
205 \par
206 \par
211 \par
212 {\cf17 inline} Bitboard line_bb(Square s1, Square s2) \{\par
213 \par
214   assert(is_ok(s1) && is_ok(s2));\par
215 \par
216   {\cf19 return} LineBB[s1][s2];\par
217 \}\par
218 \par
219 \par
227 \par
228 {\cf17 inline} Bitboard between_bb(Square s1, Square s2) \{\par
229 \par
230   assert(is_ok(s1) && is_ok(s2));\par
231 \par
232   {\cf19 return} BetweenBB[s1][s2];\par
233 \}\par
234 \par
235 \par
239 \par
240 {\cf17 constexpr} Bitboard forward_ranks_bb(Color c, Square s) \{\par
241   {\cf19 return} c == WHITE ? ~Rank1BB << 8 * relative_rank(WHITE, s)\par
242                     : ~Rank8BB >> 8 * relative_rank(BLACK, s);\par
243 \}\par
244 \par
245 \par
248 \par
249 {\cf17 constexpr} Bitboard forward_file_bb(Color c, Square s) \{\par
250   {\cf19 return} forward_ranks_bb(c, s) & file_bb(s);\par
251 \}\par
252 \par
253 \par
257 \par
258 {\cf17 constexpr} Bitboard pawn_attack_span(Color c, Square s) \{\par
259   {\cf19 return} forward_ranks_bb(c, s) & adjacent_files_bb(s);\par
260 \}\par
261 \par
262 \par
265 \par
266 {\cf17 constexpr} Bitboard passed_pawn_span(Color c, Square s) \{\par
267   {\cf19 return} pawn_attack_span(c, s) | forward_file_bb(c, s);\par
268 \}\par
269 \par
270 \par
273 \par
274 {\cf17 inline} {\cf18 bool} aligned(Square s1, Square s2, Square s3) \{\par
275   {\cf19 return} line_bb(s1, s2) & s3;\par
276 \}\par
277 \par
278 \par
281 \par
282 {\cf17 template}<{\cf17 typename} T1 = Square> {\cf17 inline} {\cf18 int} distance(Square x, Square y);\par
283 {\cf17 template}<> {\cf17 inline} {\cf18 int} distance<File>(Square x, Square y) \{ {\cf19 return} std::abs(file_of(x) - file_of(y)); \}\par
284 {\cf17 template}<> {\cf17 inline} {\cf18 int} distance<Rank>(Square x, Square y) \{ {\cf19 return} std::abs(rank_of(x) - rank_of(y)); \}\par
285 {\cf17 template}<> {\cf17 inline} {\cf18 int} distance<Square>(Square x, Square y) \{ {\cf19 return} SquareDistance[x][y]; \}\par
286 \par
287 {\cf17 inline} {\cf18 int} edge_distance(File f) \{ {\cf19 return} std::min(f, File(FILE_H - f)); \}\par
288 {\cf17 inline} {\cf18 int} edge_distance(Rank r) \{ {\cf19 return} std::min(r, Rank(RANK_8 - r)); \}\par
289 \par
290 \par
293 \par
294 {\cf17 template}<PieceType Pt>\par
295 {\cf17 inline} Bitboard attacks_bb(Square s) \{\par
296 \par
297   assert((Pt != PAWN) && (is_ok(s)));\par
298 \par
299   {\cf19 return} PseudoAttacks[Pt][s];\par
300 \}\par
301 \par
302 \par
306 \par
307 {\cf17 template}<PieceType Pt>\par
308 {\cf17 inline} Bitboard attacks_bb(Square s, Bitboard occupied) \{\par
309 \par
310   assert((Pt != PAWN) && (is_ok(s)));\par
311 \par
312   {\cf19 switch} (Pt)\par
313   \{\par
314   {\cf19 case} BISHOP: {\cf19 return} BishopMagics[s].attacks[BishopMagics[s].index(occupied)];\par
315   {\cf19 case} ROOK  : {\cf19 return}   RookMagics[s].attacks[  RookMagics[s].index(occupied)];\par
316   {\cf19 case} QUEEN : {\cf19 return} attacks_bb<BISHOP>(s, occupied) | attacks_bb<ROOK>(s, occupied);\par
317   default    : {\cf19 return} PseudoAttacks[Pt][s];\par
318   \}\par
319 \}\par
320 \par
321 {\cf17 inline} Bitboard attacks_bb(PieceType pt, Square s, Bitboard occupied) \{\par
322 \par
323   assert((pt != PAWN) && (is_ok(s)));\par
324 \par
325   {\cf19 switch} (pt)\par
326   \{\par
327   {\cf19 case} BISHOP: {\cf19 return} attacks_bb<BISHOP>(s, occupied);\par
328   {\cf19 case} ROOK  : {\cf19 return} attacks_bb<  ROOK>(s, occupied);\par
329   {\cf19 case} QUEEN : {\cf19 return} attacks_bb<BISHOP>(s, occupied) | attacks_bb<ROOK>(s, occupied);\par
330   default    : {\cf19 return} PseudoAttacks[pt][s];\par
331   \}\par
332 \}\par
333 \par
334 \par
336 \par
337 {\cf17 inline} {\cf18 int} popcount(Bitboard b) \{\par
338 \par
339 {\cf21 #ifndef USE_POPCNT}\par
340 \par
341   {\cf17 union }\{ Bitboard bb; uint16_t u[4]; \} v = \{ b \};\par
342   {\cf19 return} PopCnt16[v.u[0]] + PopCnt16[v.u[1]] + PopCnt16[v.u[2]] + PopCnt16[v.u[3]];\par
343 \par
344 {\cf21 #elif defined(_MSC_VER) || defined(__INTEL_COMPILER)}\par
345 \par
346   {\cf19 return} ({\cf18 int})_mm_popcnt_u64(b);\par
347 \par
348 {\cf21 #else }{\cf20 // Assumed gcc or compatible compiler}\par
349 \par
350   {\cf19 return} __builtin_popcountll(b);\par
351 \par
352 {\cf21 #endif}\par
353 \}\par
354 \par
355 \par
357 \par
358 {\cf21 #if defined(__GNUC__)  }{\cf20 // GCC, Clang, ICC}\par
359 \par
360 {\cf17 inline} Square lsb(Bitboard b) \{\par
361   assert(b);\par
362   {\cf19 return} Square(__builtin_ctzll(b));\par
363 \}\par
364 \par
365 {\cf17 inline} Square msb(Bitboard b) \{\par
366   assert(b);\par
367   {\cf19 return} Square(63 ^ __builtin_clzll(b));\par
368 \}\par
369 \par
370 {\cf21 #elif defined(_MSC_VER)  }{\cf20 // MSVC}\par
371 \par
372 {\cf21 #ifdef _WIN64  }{\cf20 // MSVC, WIN64}\par
373 \par
374 {\cf17 inline} Square lsb(Bitboard b) \{\par
375   assert(b);\par
376   {\cf18 unsigned} {\cf18 long} idx;\par
377   _BitScanForward64(&idx, b);\par
378   {\cf19 return} (Square) idx;\par
379 \}\par
380 \par
381 {\cf17 inline} Square msb(Bitboard b) \{\par
382   assert(b);\par
383   {\cf18 unsigned} {\cf18 long} idx;\par
384   _BitScanReverse64(&idx, b);\par
385   {\cf19 return} (Square) idx;\par
386 \}\par
387 \par
388 {\cf21 #else  }{\cf20 // MSVC, WIN32}\par
389 \par
390 {\cf17 inline} Square lsb(Bitboard b) \{\par
391   assert(b);\par
392   {\cf18 unsigned} {\cf18 long} idx;\par
393 \par
394   {\cf19 if} (b & 0xffffffff) \{\par
395       _BitScanForward(&idx, int32_t(b));\par
396       {\cf19 return} Square(idx);\par
397   \} {\cf19 else} \{\par
398       _BitScanForward(&idx, int32_t(b >> 32));\par
399       {\cf19 return} Square(idx + 32);\par
400   \}\par
401 \}\par
402 \par
403 {\cf17 inline} Square msb(Bitboard b) \{\par
404   assert(b);\par
405   {\cf18 unsigned} {\cf18 long} idx;\par
406 \par
407   {\cf19 if} (b >> 32) \{\par
408       _BitScanReverse(&idx, int32_t(b >> 32));\par
409       {\cf19 return} Square(idx + 32);\par
410   \} {\cf19 else} \{\par
411       _BitScanReverse(&idx, int32_t(b));\par
412       {\cf19 return} Square(idx);\par
413   \}\par
414 \}\par
415 \par
416 {\cf21 #endif}\par
417 \par
418 {\cf21 #else  }{\cf20 // Compiler is neither GCC nor MSVC compatible}\par
419 \par
420 {\cf21 #error "Compiler not supported."}\par
421 \par
422 {\cf21 #endif}\par
423 \par
426 \par
427 {\cf17 inline} Bitboard least_significant_square_bb(Bitboard b) \{\par
428   assert(b);\par
429   {\cf19 return} b & -b;\par
430 \}\par
431 \par
433 \par
434 {\cf17 inline} Square pop_lsb(Bitboard& b) \{\par
435   assert(b);\par
436   {\cf17 const} Square s = lsb(b);\par
437   b &= b - 1;\par
438   {\cf19 return} s;\par
439 \}\par
440 \par
441 \par
444 {\cf17 inline} Square frontmost_sq(Color c, Bitboard b) \{\par
445   assert(b);\par
446   {\cf19 return} c == WHITE ? msb(b) : lsb(b);\par
447 \}\par
448 \par
449 \} {\cf20 // namespace Stockfish}\par
450 \par
451 {\cf21 #endif }{\cf20 // #ifndef BITBOARD_H_INCLUDED}\par
}
}