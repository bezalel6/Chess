{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
simd.h\par \pard\plain 
{\tc\tcl2 \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/simd.h}
{\xe \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/simd.h}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 /*}\par
2 {\cf20   Stockfish, a UCI chess playing engine derived from Glaurung 2.1}\par
3 {\cf20   Copyright (C) 2004-2021 The Stockfish developers (see AUTHORS file)}\par
4 {\cf20 }\par
5 {\cf20   Stockfish is free software: you can redistribute it and/or modify}\par
6 {\cf20   it under the terms of the GNU General Public License as published by}\par
7 {\cf20   the Free Software Foundation, either version 3 of the License, or}\par
8 {\cf20   (at your option) any later version.}\par
9 {\cf20 }\par
10 {\cf20   Stockfish is distributed in the hope that it will be useful,}\par
11 {\cf20   but WITHOUT ANY WARRANTY; without even the implied warranty of}\par
12 {\cf20   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the}\par
13 {\cf20   GNU General Public License for more details.}\par
14 {\cf20 }\par
15 {\cf20   You should have received a copy of the GNU General Public License}\par
16 {\cf20   along with this program.  If not, see <http://www.gnu.org/licenses/>.}\par
17 {\cf20 */}\par
18 \par
19 {\cf21 #ifndef STOCKFISH_SIMD_H_INCLUDED}\par
20 {\cf21 #define STOCKFISH_SIMD_H_INCLUDED}\par
21 \par
22 {\cf21 #if defined(USE_AVX2)}\par
23 {\cf21 # include <immintrin.h>}\par
24 \par
25 {\cf21 #elif defined(USE_SSE41)}\par
26 {\cf21 # include <smmintrin.h>}\par
27 \par
28 {\cf21 #elif defined(USE_SSSE3)}\par
29 {\cf21 # include <tmmintrin.h>}\par
30 \par
31 {\cf21 #elif defined(USE_SSE2)}\par
32 {\cf21 # include <emmintrin.h>}\par
33 \par
34 {\cf21 #elif defined(USE_MMX)}\par
35 {\cf21 # include <mmintrin.h>}\par
36 \par
37 {\cf21 #elif defined(USE_NEON)}\par
38 {\cf21 # include <arm_neon.h>}\par
39 {\cf21 #endif}\par
40 \par
41 {\cf20 // The inline asm is only safe for GCC, where it is necessary to get good codegen.}\par
42 {\cf20 // See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101693}\par
43 {\cf20 // Clang does fine without it.}\par
44 {\cf20 // Play around here: https://godbolt.org/z/7EWqrYq51}\par
45 {\cf21 #if (defined(__GNUC__) && !defined(__clang__) && !defined(__INTEL_COMPILER))}\par
46 {\cf21 #define USE_INLINE_ASM}\par
47 {\cf21 #endif}\par
48 \par
49 {\cf17 namespace }Stockfish::Simd \{\par
50 \par
51 {\cf21 #if defined (USE_AVX512)}\par
52 \par
53     [[maybe_unused]] {\cf17 static} {\cf18 int} m512_hadd(__m512i sum, {\cf18 int} bias) \{\par
54       {\cf19 return} _mm512_reduce_add_epi32(sum) + bias;\par
55     \}\par
56 \par
57     {\cf20 /*}\par
58 {\cf20       Parameters:}\par
59 {\cf20         sum0 = [zmm0.i128[0], zmm0.i128[1], zmm0.i128[2], zmm0.i128[3]]}\par
60 {\cf20         sum1 = [zmm1.i128[0], zmm1.i128[1], zmm1.i128[2], zmm1.i128[3]]}\par
61 {\cf20         sum2 = [zmm2.i128[0], zmm2.i128[1], zmm2.i128[2], zmm2.i128[3]]}\par
62 {\cf20         sum3 = [zmm3.i128[0], zmm3.i128[1], zmm3.i128[2], zmm3.i128[3]]}\par
63 {\cf20 }\par
64 {\cf20       Returns:}\par
65 {\cf20         ret = [}\par
66 {\cf20           reduce_add_epi32(zmm0.i128[0]), reduce_add_epi32(zmm1.i128[0]), reduce_add_epi32(zmm2.i128[0]), reduce_add_epi32(zmm3.i128[0]),}\par
67 {\cf20           reduce_add_epi32(zmm0.i128[1]), reduce_add_epi32(zmm1.i128[1]), reduce_add_epi32(zmm2.i128[1]), reduce_add_epi32(zmm3.i128[1]),}\par
68 {\cf20           reduce_add_epi32(zmm0.i128[2]), reduce_add_epi32(zmm1.i128[2]), reduce_add_epi32(zmm2.i128[2]), reduce_add_epi32(zmm3.i128[2]),}\par
69 {\cf20           reduce_add_epi32(zmm0.i128[3]), reduce_add_epi32(zmm1.i128[3]), reduce_add_epi32(zmm2.i128[3]), reduce_add_epi32(zmm3.i128[3])}\par
70 {\cf20         ]}\par
71 {\cf20     */}\par
72     [[maybe_unused]] {\cf17 static} __m512i m512_hadd128x16_interleave(\par
73         __m512i sum0, __m512i sum1, __m512i sum2, __m512i sum3) \{\par
74 \par
75       __m512i sum01a = _mm512_unpacklo_epi32(sum0, sum1);\par
76       __m512i sum01b = _mm512_unpackhi_epi32(sum0, sum1);\par
77 \par
78       __m512i sum23a = _mm512_unpacklo_epi32(sum2, sum3);\par
79       __m512i sum23b = _mm512_unpackhi_epi32(sum2, sum3);\par
80 \par
81       __m512i sum01 = _mm512_add_epi32(sum01a, sum01b);\par
82       __m512i sum23 = _mm512_add_epi32(sum23a, sum23b);\par
83 \par
84       __m512i sum0123a = _mm512_unpacklo_epi64(sum01, sum23);\par
85       __m512i sum0123b = _mm512_unpackhi_epi64(sum01, sum23);\par
86 \par
87       {\cf19 return} _mm512_add_epi32(sum0123a, sum0123b);\par
88     \}\par
89 \par
90     [[maybe_unused]] {\cf17 static} __m128i m512_haddx4(\par
91         __m512i sum0, __m512i sum1, __m512i sum2, __m512i sum3,\par
92         __m128i bias) \{\par
93 \par
94       __m512i sum = m512_hadd128x16_interleave(sum0, sum1, sum2, sum3);\par
95 \par
96       __m256i sum256lo = _mm512_castsi512_si256(sum);\par
97       __m256i sum256hi = _mm512_extracti64x4_epi64(sum, 1);\par
98 \par
99       sum256lo = _mm256_add_epi32(sum256lo, sum256hi);\par
100 \par
101       __m128i sum128lo = _mm256_castsi256_si128(sum256lo);\par
102       __m128i sum128hi = _mm256_extracti128_si256(sum256lo, 1);\par
103 \par
104       {\cf19 return} _mm_add_epi32(_mm_add_epi32(sum128lo, sum128hi), bias);\par
105     \}\par
106 \par
107     [[maybe_unused]] {\cf17 static} {\cf18 void} m512_add_dpbusd_epi32(\par
108         __m512i& acc,\par
109         __m512i a,\par
110         __m512i b) \{\par
111 \par
112 {\cf21 # if defined (USE_VNNI)}\par
113 {\cf21 #   if defined (USE_INLINE_ASM)}\par
114       {\cf17 asm}(\par
115         {\cf22 "vpdpbusd %[b], %[a], %[acc]\\n\\t"}\par
116         : [acc]{\cf22 "+v"}(acc)\par
117         : [a]{\cf22 "v"}(a), [b]{\cf22 "vm"}(b)\par
118       );\par
119 {\cf21 #   else}\par
120       acc = _mm512_dpbusd_epi32(acc, a, b);\par
121 {\cf21 #   endif}\par
122 {\cf21 # else}\par
123 {\cf21 #   if defined (USE_INLINE_ASM)}\par
124       __m512i tmp = _mm512_maddubs_epi16(a, b);\par
125       {\cf17 asm}(\par
126           {\cf22 "vpmaddwd    %[tmp], %[ones], %[tmp]\\n\\t"}\par
127           {\cf22 "vpaddd      %[acc], %[tmp], %[acc]\\n\\t"}\par
128           : [acc]{\cf22 "+v"}(acc), [tmp]{\cf22 "+&v"}(tmp)\par
129           : [ones]{\cf22 "v"}(_mm512_set1_epi16(1))\par
130       );\par
131 {\cf21 #   else}\par
132       __m512i product0 = _mm512_maddubs_epi16(a, b);\par
133       product0 = _mm512_madd_epi16(product0, _mm512_set1_epi16(1));\par
134       acc = _mm512_add_epi32(acc, product0);\par
135 {\cf21 #   endif}\par
136 {\cf21 # endif}\par
137     \}\par
138 \par
139     [[maybe_unused]] {\cf17 static} {\cf18 void} m512_add_dpbusd_epi32x2(\par
140         __m512i& acc,\par
141         __m512i a0, __m512i b0,\par
142         __m512i a1, __m512i b1) \{\par
143 \par
144 {\cf21 # if defined (USE_VNNI)}\par
145 {\cf21 #   if defined (USE_INLINE_ASM)}\par
146       {\cf17 asm}(\par
147         {\cf22 "vpdpbusd %[b0], %[a0], %[acc]\\n\\t"}\par
148         {\cf22 "vpdpbusd %[b1], %[a1], %[acc]\\n\\t"}\par
149         : [acc]{\cf22 "+v"}(acc)\par
150         : [a0]{\cf22 "v"}(a0), [b0]{\cf22 "vm"}(b0), [a1]{\cf22 "v"}(a1), [b1]{\cf22 "vm"}(b1)\par
151       );\par
152 {\cf21 #   else}\par
153       acc = _mm512_dpbusd_epi32(acc, a0, b0);\par
154       acc = _mm512_dpbusd_epi32(acc, a1, b1);\par
155 {\cf21 #   endif}\par
156 {\cf21 # else}\par
157 {\cf21 #   if defined (USE_INLINE_ASM)}\par
158       __m512i tmp0 = _mm512_maddubs_epi16(a0, b0);\par
159       __m512i tmp1 = _mm512_maddubs_epi16(a1, b1);\par
160       {\cf17 asm}(\par
161           {\cf22 "vpaddsw     %[tmp0], %[tmp1], %[tmp0]\\n\\t"}\par
162           {\cf22 "vpmaddwd    %[tmp0], %[ones], %[tmp0]\\n\\t"}\par
163           {\cf22 "vpaddd      %[acc], %[tmp0], %[acc]\\n\\t"}\par
164           : [acc]{\cf22 "+v"}(acc), [tmp0]{\cf22 "+&v"}(tmp0)\par
165           : [tmp1]{\cf22 "v"}(tmp1), [ones]{\cf22 "v"}(_mm512_set1_epi16(1))\par
166       );\par
167 {\cf21 #   else}\par
168       __m512i product0 = _mm512_maddubs_epi16(a0, b0);\par
169       __m512i product1 = _mm512_maddubs_epi16(a1, b1);\par
170       product0 = _mm512_adds_epi16(product0, product1);\par
171       product0 = _mm512_madd_epi16(product0, _mm512_set1_epi16(1));\par
172       acc = _mm512_add_epi32(acc, product0);\par
173 {\cf21 #   endif}\par
174 {\cf21 # endif}\par
175     \}\par
176 \par
177 {\cf21 #endif}\par
178 \par
179 {\cf21 #if defined (USE_AVX2)}\par
180 \par
181     [[maybe_unused]] {\cf17 static} {\cf18 int} m256_hadd(__m256i sum, {\cf18 int} bias) \{\par
182       __m128i sum128 = _mm_add_epi32(_mm256_castsi256_si128(sum), _mm256_extracti128_si256(sum, 1));\par
183       sum128 = _mm_add_epi32(sum128, _mm_shuffle_epi32(sum128, _MM_PERM_BADC));\par
184       sum128 = _mm_add_epi32(sum128, _mm_shuffle_epi32(sum128, _MM_PERM_CDAB));\par
185       {\cf19 return} _mm_cvtsi128_si32(sum128) + bias;\par
186     \}\par
187 \par
188     [[maybe_unused]] {\cf17 static} __m128i m256_haddx4(\par
189         __m256i sum0, __m256i sum1, __m256i sum2, __m256i sum3,\par
190         __m128i bias) \{\par
191 \par
192       sum0 = _mm256_hadd_epi32(sum0, sum1);\par
193       sum2 = _mm256_hadd_epi32(sum2, sum3);\par
194 \par
195       sum0 = _mm256_hadd_epi32(sum0, sum2);\par
196 \par
197       __m128i sum128lo = _mm256_castsi256_si128(sum0);\par
198       __m128i sum128hi = _mm256_extracti128_si256(sum0, 1);\par
199 \par
200       {\cf19 return} _mm_add_epi32(_mm_add_epi32(sum128lo, sum128hi), bias);\par
201     \}\par
202 \par
203     [[maybe_unused]] {\cf17 static} {\cf18 void} m256_add_dpbusd_epi32(\par
204         __m256i& acc,\par
205         __m256i a,\par
206         __m256i b) \{\par
207 \par
208 {\cf21 # if defined (USE_VNNI)}\par
209 {\cf21 #   if defined (USE_INLINE_ASM)}\par
210       {\cf17 asm}(\par
211         {\cf22 "vpdpbusd %[b], %[a], %[acc]\\n\\t"}\par
212         : [acc]{\cf22 "+v"}(acc)\par
213         : [a]{\cf22 "v"}(a), [b]{\cf22 "vm"}(b)\par
214       );\par
215 {\cf21 #   else}\par
216       acc = _mm256_dpbusd_epi32(acc, a, b);\par
217 {\cf21 #   endif}\par
218 {\cf21 # else}\par
219 {\cf21 #   if defined (USE_INLINE_ASM)}\par
220       __m256i tmp = _mm256_maddubs_epi16(a, b);\par
221       {\cf17 asm}(\par
222           {\cf22 "vpmaddwd    %[tmp], %[ones], %[tmp]\\n\\t"}\par
223           {\cf22 "vpaddd      %[acc], %[tmp], %[acc]\\n\\t"}\par
224           : [acc]{\cf22 "+v"}(acc), [tmp]{\cf22 "+&v"}(tmp)\par
225           : [ones]{\cf22 "v"}(_mm256_set1_epi16(1))\par
226       );\par
227 {\cf21 #   else}\par
228       __m256i product0 = _mm256_maddubs_epi16(a, b);\par
229       product0 = _mm256_madd_epi16(product0, _mm256_set1_epi16(1));\par
230       acc = _mm256_add_epi32(acc, product0);\par
231 {\cf21 #   endif}\par
232 {\cf21 # endif}\par
233     \}\par
234 \par
235     [[maybe_unused]] {\cf17 static} {\cf18 void} m256_add_dpbusd_epi32x2(\par
236         __m256i& acc,\par
237         __m256i a0, __m256i b0,\par
238         __m256i a1, __m256i b1) \{\par
239 \par
240 {\cf21 # if defined (USE_VNNI)}\par
241 {\cf21 #   if defined (USE_INLINE_ASM)}\par
242       {\cf17 asm}(\par
243         {\cf22 "vpdpbusd %[b0], %[a0], %[acc]\\n\\t"}\par
244         {\cf22 "vpdpbusd %[b1], %[a1], %[acc]\\n\\t"}\par
245         : [acc]{\cf22 "+v"}(acc)\par
246         : [a0]{\cf22 "v"}(a0), [b0]{\cf22 "vm"}(b0), [a1]{\cf22 "v"}(a1), [b1]{\cf22 "vm"}(b1)\par
247       );\par
248 {\cf21 #   else}\par
249       acc = _mm256_dpbusd_epi32(acc, a0, b0);\par
250       acc = _mm256_dpbusd_epi32(acc, a1, b1);\par
251 {\cf21 #   endif}\par
252 {\cf21 # else}\par
253 {\cf21 #   if defined (USE_INLINE_ASM)}\par
254       __m256i tmp0 = _mm256_maddubs_epi16(a0, b0);\par
255       __m256i tmp1 = _mm256_maddubs_epi16(a1, b1);\par
256       {\cf17 asm}(\par
257           {\cf22 "vpaddsw     %[tmp0], %[tmp1], %[tmp0]\\n\\t"}\par
258           {\cf22 "vpmaddwd    %[tmp0], %[ones], %[tmp0]\\n\\t"}\par
259           {\cf22 "vpaddd      %[acc], %[tmp0], %[acc]\\n\\t"}\par
260           : [acc]{\cf22 "+v"}(acc), [tmp0]{\cf22 "+&v"}(tmp0)\par
261           : [tmp1]{\cf22 "v"}(tmp1), [ones]{\cf22 "v"}(_mm256_set1_epi16(1))\par
262       );\par
263 {\cf21 #   else}\par
264       __m256i product0 = _mm256_maddubs_epi16(a0, b0);\par
265       __m256i product1 = _mm256_maddubs_epi16(a1, b1);\par
266       product0 = _mm256_adds_epi16(product0, product1);\par
267       product0 = _mm256_madd_epi16(product0, _mm256_set1_epi16(1));\par
268       acc = _mm256_add_epi32(acc, product0);\par
269 {\cf21 #   endif}\par
270 {\cf21 # endif}\par
271     \}\par
272 \par
273 {\cf21 #endif}\par
274 \par
275 {\cf21 #if defined (USE_SSSE3)}\par
276 \par
277     [[maybe_unused]] {\cf17 static} {\cf18 int} m128_hadd(__m128i sum, {\cf18 int} bias) \{\par
278       sum = _mm_add_epi32(sum, _mm_shuffle_epi32(sum, 0x4E)); {\cf20 //_MM_PERM_BADC}\par
279       sum = _mm_add_epi32(sum, _mm_shuffle_epi32(sum, 0xB1)); {\cf20 //_MM_PERM_CDAB}\par
280       {\cf19 return} _mm_cvtsi128_si32(sum) + bias;\par
281     \}\par
282 \par
283     [[maybe_unused]] {\cf17 static} __m128i m128_haddx4(\par
284         __m128i sum0, __m128i sum1, __m128i sum2, __m128i sum3,\par
285         __m128i bias) \{\par
286 \par
287       sum0 = _mm_hadd_epi32(sum0, sum1);\par
288       sum2 = _mm_hadd_epi32(sum2, sum3);\par
289       sum0 = _mm_hadd_epi32(sum0, sum2);\par
290       {\cf19 return} _mm_add_epi32(sum0, bias);\par
291     \}\par
292 \par
293     [[maybe_unused]] {\cf17 static} {\cf18 void} m128_add_dpbusd_epi32(\par
294         __m128i& acc,\par
295         __m128i a,\par
296         __m128i b) \{\par
297 \par
298 {\cf21 #   if defined (USE_INLINE_ASM)}\par
299       __m128i tmp = _mm_maddubs_epi16(a, b);\par
300       {\cf17 asm}(\par
301           {\cf22 "pmaddwd    %[ones], %[tmp]\\n\\t"}\par
302           {\cf22 "paddd      %[tmp], %[acc]\\n\\t"}\par
303           : [acc]{\cf22 "+v"}(acc), [tmp]{\cf22 "+&v"}(tmp)\par
304           : [ones]{\cf22 "v"}(_mm_set1_epi16(1))\par
305       );\par
306 {\cf21 #   else}\par
307       __m128i product0 = _mm_maddubs_epi16(a, b);\par
308       product0 = _mm_madd_epi16(product0, _mm_set1_epi16(1));\par
309       acc = _mm_add_epi32(acc, product0);\par
310 {\cf21 #   endif}\par
311     \}\par
312 \par
313     [[maybe_unused]] {\cf17 static} {\cf18 void} m128_add_dpbusd_epi32x2(\par
314         __m128i& acc,\par
315         __m128i a0, __m128i b0,\par
316         __m128i a1, __m128i b1) \{\par
317 \par
318 {\cf21 #   if defined (USE_INLINE_ASM)}\par
319       __m128i tmp0 = _mm_maddubs_epi16(a0, b0);\par
320       __m128i tmp1 = _mm_maddubs_epi16(a1, b1);\par
321       {\cf17 asm}(\par
322           {\cf22 "paddsw     %[tmp1], %[tmp0]\\n\\t"}\par
323           {\cf22 "pmaddwd    %[ones], %[tmp0]\\n\\t"}\par
324           {\cf22 "paddd      %[tmp0], %[acc]\\n\\t"}\par
325           : [acc]{\cf22 "+v"}(acc), [tmp0]{\cf22 "+&v"}(tmp0)\par
326           : [tmp1]{\cf22 "v"}(tmp1), [ones]{\cf22 "v"}(_mm_set1_epi16(1))\par
327       );\par
328 {\cf21 #   else}\par
329       __m128i product0 = _mm_maddubs_epi16(a0, b0);\par
330       __m128i product1 = _mm_maddubs_epi16(a1, b1);\par
331       product0 = _mm_adds_epi16(product0, product1);\par
332       product0 = _mm_madd_epi16(product0, _mm_set1_epi16(1));\par
333       acc = _mm_add_epi32(acc, product0);\par
334 {\cf21 #   endif}\par
335     \}\par
336 \par
337 {\cf21 #endif}\par
338 \par
339 \}\par
340 \par
341 {\cf21 #endif }{\cf20 // STOCKFISH_SIMD_H_INCLUDED}\par
}
}