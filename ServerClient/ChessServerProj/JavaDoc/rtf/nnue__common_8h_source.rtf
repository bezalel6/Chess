{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
nnue_common.h\par \pard\plain 
{\tc\tcl2 \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/nnue/nnue_common.h}
{\xe \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/nnue/nnue_common.h}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 /*}\par
2 {\cf20   Stockfish, a UCI chess playing engine derived from Glaurung 2.1}\par
3 {\cf20   Copyright (C) 2004-2021 The Stockfish developers (see AUTHORS file)}\par
4 {\cf20 }\par
5 {\cf20   Stockfish is free software: you can redistribute it and/or modify}\par
6 {\cf20   it under the terms of the GNU General Public License as published by}\par
7 {\cf20   the Free Software Foundation, either version 3 of the License, or}\par
8 {\cf20   (at your option) any later version.}\par
9 {\cf20 }\par
10 {\cf20   Stockfish is distributed in the hope that it will be useful,}\par
11 {\cf20   but WITHOUT ANY WARRANTY; without even the implied warranty of}\par
12 {\cf20   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the}\par
13 {\cf20   GNU General Public License for more details.}\par
14 {\cf20 }\par
15 {\cf20   You should have received a copy of the GNU General Public License}\par
16 {\cf20   along with this program.  If not, see <http://www.gnu.org/licenses/>.}\par
17 {\cf20 */}\par
18 \par
19 {\cf20 // Constants used in NNUE evaluation function}\par
20 \par
21 {\cf21 #ifndef NNUE_COMMON_H_INCLUDED}\par
22 {\cf21 #define NNUE_COMMON_H_INCLUDED}\par
23 \par
24 {\cf21 #include <cstring>}\par
25 {\cf21 #include <iostream>}\par
26 \par
27 {\cf21 #include "../misc.h"}  {\cf20 // for IsLittleEndian}\par
28 \par
29 {\cf21 #if defined(USE_AVX2)}\par
30 {\cf21 #include <immintrin.h>}\par
31 \par
32 {\cf21 #elif defined(USE_SSE41)}\par
33 {\cf21 #include <smmintrin.h>}\par
34 \par
35 {\cf21 #elif defined(USE_SSSE3)}\par
36 {\cf21 #include <tmmintrin.h>}\par
37 \par
38 {\cf21 #elif defined(USE_SSE2)}\par
39 {\cf21 #include <emmintrin.h>}\par
40 \par
41 {\cf21 #elif defined(USE_MMX)}\par
42 {\cf21 #include <mmintrin.h>}\par
43 \par
44 {\cf21 #elif defined(USE_NEON)}\par
45 {\cf21 #include <arm_neon.h>}\par
46 {\cf21 #endif}\par
47 \par
48 {\cf17 namespace }Stockfish::Eval::NNUE \{\par
49 \par
50   {\cf20 // Version of the evaluation file}\par
51   {\cf17 constexpr} std::uint32_t Version = 0x7AF32F20u;\par
52 \par
53   {\cf20 // Constant used in evaluation value calculation}\par
54   {\cf17 constexpr} {\cf18 int} OutputScale = 16;\par
55   {\cf17 constexpr} {\cf18 int} WeightScaleBits = 6;\par
56 \par
57   {\cf20 // Size of cache line (in bytes)}\par
58   {\cf17 constexpr} std::size_t CacheLineSize = 64;\par
59 \par
60   {\cf20 // SIMD width (in bytes)}\par
61 {\cf21   #if defined(USE_AVX2)}\par
62   {\cf17 constexpr} std::size_t SimdWidth = 32;\par
63 \par
64 {\cf21   #elif defined(USE_SSE2)}\par
65   {\cf17 constexpr} std::size_t SimdWidth = 16;\par
66 \par
67 {\cf21   #elif defined(USE_MMX)}\par
68   {\cf17 constexpr} std::size_t SimdWidth = 8;\par
69 \par
70 {\cf21   #elif defined(USE_NEON)}\par
71   {\cf17 constexpr} std::size_t SimdWidth = 16;\par
72 {\cf21   #endif}\par
73 \par
74   {\cf17 constexpr} std::size_t MaxSimdWidth = 32;\par
75 \par
76   {\cf20 // Type of input feature after conversion}\par
77   {\cf17 using} TransformedFeatureType = std::uint8_t;\par
78   {\cf17 using} IndexType = std::uint32_t;\par
79 \par
80   {\cf20 // Round n up to be a multiple of base}\par
81   {\cf17 template} <{\cf17 typename} IntType>\par
82   {\cf17 constexpr} IntType ceil_to_multiple(IntType n, IntType base) \{\par
83       {\cf19 return} (n + base - 1) / base * base;\par
84   \}\par
85 \par
86   {\cf20 // read_little_endian() is our utility to read an integer (signed or unsigned, any size)}\par
87   {\cf20 // from a stream in little-endian order. We swap the byte order after the read if}\par
88   {\cf20 // necessary to return a result with the byte ordering of the compiling machine.}\par
89   {\cf17 template} <{\cf17 typename} IntType>\par
90   {\cf17 inline} IntType read_little_endian(std::istream& stream) \{\par
91       IntType result;\par
92 \par
93       {\cf19 if} (IsLittleEndian)\par
94           stream.read({\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(&result), {\cf17 sizeof}(IntType));\par
95       {\cf19 else}\par
96       \{\par
97           std::uint8_t u[{\cf17 sizeof}(IntType)];\par
98           {\cf17 typename} std::make_unsigned<IntType>::type v = 0;\par
99 \par
100           stream.read({\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(u), {\cf17 sizeof}(IntType));\par
101           {\cf19 for} (std::size_t i = 0; i < {\cf17 sizeof}(IntType); ++i)\par
102               v = (v << 8) | u[{\cf17 sizeof}(IntType) - i - 1];\par
103 \par
104           std::memcpy(&result, &v, {\cf17 sizeof}(IntType));\par
105       \}\par
106 \par
107       {\cf19 return} result;\par
108   \}\par
109 \par
110   {\cf20 // write_little_endian() is our utility to write an integer (signed or unsigned, any size)}\par
111   {\cf20 // to a stream in little-endian order. We swap the byte order before the write if}\par
112   {\cf20 // necessary to always write in little endian order, independantly of the byte}\par
113   {\cf20 // ordering of the compiling machine.}\par
114   {\cf17 template} <{\cf17 typename} IntType>\par
115   {\cf17 inline} {\cf18 void} write_little_endian(std::ostream& stream, IntType value) \{\par
116 \par
117       {\cf19 if} (IsLittleEndian)\par
118           stream.write({\cf17 reinterpret_cast<}{\cf17 const }{\cf18 char}*{\cf17 >}(&value), {\cf17 sizeof}(IntType));\par
119       {\cf19 else}\par
120       \{\par
121           std::uint8_t u[{\cf17 sizeof}(IntType)];\par
122           {\cf17 typename} std::make_unsigned<IntType>::type v = value;\par
123 \par
124           std::size_t i = 0;\par
125           {\cf20 // if constexpr to silence the warning about shift by 8}\par
126           {\cf19 if} {\cf17 constexpr} ({\cf17 sizeof}(IntType) > 1)\par
127           \{\par
128             {\cf19 for} (; i + 1 < {\cf17 sizeof}(IntType); ++i)\par
129             \{\par
130                 u[i] = v;\par
131                 v >>= 8;\par
132             \}\par
133           \}\par
134           u[i] = v;\par
135 \par
136           stream.write({\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(u), {\cf17 sizeof}(IntType));\par
137       \}\par
138   \}\par
139 \par
140   {\cf20 // read_little_endian(s, out, N) : read integers in bulk from a little indian stream.}\par
141   {\cf20 // This reads N integers from stream s and put them in array out.}\par
142   {\cf17 template} <{\cf17 typename} IntType>\par
143   {\cf17 inline} {\cf18 void} read_little_endian(std::istream& stream, IntType* out, std::size_t count) \{\par
144       {\cf19 if} (IsLittleEndian)\par
145           stream.read({\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(out), {\cf17 sizeof}(IntType) * count);\par
146       {\cf19 else}\par
147           {\cf19 for} (std::size_t i = 0; i < count; ++i)\par
148               out[i] = read_little_endian<IntType>(stream);\par
149   \}\par
150 \par
151   {\cf20 // write_little_endian(s, values, N) : write integers in bulk to a little indian stream.}\par
152   {\cf20 // This takes N integers from array values and writes them on stream s.}\par
153   {\cf17 template} <{\cf17 typename} IntType>\par
154   {\cf17 inline} {\cf18 void} write_little_endian(std::ostream& stream, {\cf17 const} IntType* values, std::size_t count) \{\par
155       {\cf19 if} (IsLittleEndian)\par
156           stream.write({\cf17 reinterpret_cast<}{\cf17 const }{\cf18 char}*{\cf17 >}(values), {\cf17 sizeof}(IntType) * count);\par
157       {\cf19 else}\par
158           {\cf19 for} (std::size_t i = 0; i < count; ++i)\par
159               write_little_endian<IntType>(stream, values[i]);\par
160   \}\par
161 \par
162 \}  {\cf20 // namespace Stockfish::Eval::NNUE}\par
163 \par
164 {\cf21 #endif }{\cf20 // #ifndef NNUE_COMMON_H_INCLUDED}\par
}
}