{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
position.h\par \pard\plain 
{\tc\tcl2 \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/position.h}
{\xe \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/position.h}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 /*}\par
2 {\cf20   Stockfish, a UCI chess playing engine derived from Glaurung 2.1}\par
3 {\cf20   Copyright (C) 2004-2021 The Stockfish developers (see AUTHORS file)}\par
4 {\cf20 }\par
5 {\cf20   Stockfish is free software: you can redistribute it and/or modify}\par
6 {\cf20   it under the terms of the GNU General Public License as published by}\par
7 {\cf20   the Free Software Foundation, either version 3 of the License, or}\par
8 {\cf20   (at your option) any later version.}\par
9 {\cf20 }\par
10 {\cf20   Stockfish is distributed in the hope that it will be useful,}\par
11 {\cf20   but WITHOUT ANY WARRANTY; without even the implied warranty of}\par
12 {\cf20   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the}\par
13 {\cf20   GNU General Public License for more details.}\par
14 {\cf20 }\par
15 {\cf20   You should have received a copy of the GNU General Public License}\par
16 {\cf20   along with this program.  If not, see <http://www.gnu.org/licenses/>.}\par
17 {\cf20 */}\par
18 \par
19 {\cf21 #ifndef POSITION_H_INCLUDED}\par
20 {\cf21 #define POSITION_H_INCLUDED}\par
21 \par
22 {\cf21 #include <cassert>}\par
23 {\cf21 #include <deque>}\par
24 {\cf21 #include <memory>} {\cf20 // For std::unique_ptr}\par
25 {\cf21 #include <string>}\par
26 \par
27 {\cf21 #include "bitboard.h"}\par
28 {\cf21 #include "evaluate.h"}\par
29 {\cf21 #include "psqt.h"}\par
30 {\cf21 #include "types.h"}\par
31 \par
32 {\cf21 #include "nnue/nnue_accumulator.h"}\par
33 \par
34 {\cf17 namespace }Stockfish \{\par
35 \par
39 \par
40 {\cf17 struct }StateInfo \{\par
41 \par
42   {\cf20 // Copied when making a move}\par
43   Key    pawnKey;\par
44   Key    materialKey;\par
45   Value  nonPawnMaterial[COLOR_NB];\par
46   {\cf18 int}    castlingRights;\par
47   {\cf18 int}    rule50;\par
48   {\cf18 int}    pliesFromNull;\par
49   Square epSquare;\par
50 \par
51   {\cf20 // Not copied when making a move (will be recomputed anyhow)}\par
52   Key        key;\par
53   Bitboard   checkersBB;\par
54   StateInfo* previous;\par
55   Bitboard   blockersForKing[COLOR_NB];\par
56   Bitboard   pinners[COLOR_NB];\par
57   Bitboard   checkSquares[PIECE_TYPE_NB];\par
58   Piece      capturedPiece;\par
59   {\cf18 int}        repetition;\par
60 \par
61   {\cf20 // Used by NNUE}\par
62   Eval::NNUE::Accumulator accumulator;\par
63   DirtyPiece dirtyPiece;\par
64 \};\par
65 \par
66 \par
71 {\cf17 typedef} std::unique_ptr<std::deque<StateInfo>> StateListPtr;\par
72 \par
73 \par
78 {\cf17 class }Thread;\par
79 \par
80 {\cf17 class }Position \{\par
81 {\cf17 public}:\par
82   {\cf17 static} {\cf18 void} init();\par
83 \par
84   Position() = {\cf19 default};\par
85   Position({\cf17 const} Position&) = {\cf17 delete};\par
86   Position& operator=({\cf17 const} Position&) = {\cf17 delete};\par
87 \par
88   {\cf20 // FEN string input/output}\par
89   Position& set({\cf17 const} std::string& fenStr, {\cf18 bool} isChess960, StateInfo* si, Thread* th);\par
90   Position& set({\cf17 const} std::string& code, Color c, StateInfo* si);\par
91   std::string fen() {\cf17 const};\par
92 \par
93   {\cf20 // Position representation}\par
94   Bitboard pieces(PieceType pt) {\cf17 const};\par
95   Bitboard pieces(PieceType pt1, PieceType pt2) {\cf17 const};\par
96   Bitboard pieces(Color c) {\cf17 const};\par
97   Bitboard pieces(Color c, PieceType pt) {\cf17 const};\par
98   Bitboard pieces(Color c, PieceType pt1, PieceType pt2) {\cf17 const};\par
99   Piece piece_on(Square s) {\cf17 const};\par
100   Square ep_square() {\cf17 const};\par
101   {\cf18 bool} empty(Square s) {\cf17 const};\par
102   {\cf17 template}<PieceType Pt> {\cf18 int} count(Color c) {\cf17 const};\par
103   {\cf17 template}<PieceType Pt> {\cf18 int} count() {\cf17 const};\par
104   {\cf17 template}<PieceType Pt> Square square(Color c) {\cf17 const};\par
105   {\cf18 bool} is_on_semiopen_file(Color c, Square s) {\cf17 const};\par
106 \par
107   {\cf20 // Castling}\par
108   CastlingRights castling_rights(Color c) {\cf17 const};\par
109   {\cf18 bool} can_castle(CastlingRights cr) {\cf17 const};\par
110   {\cf18 bool} castling_impeded(CastlingRights cr) {\cf17 const};\par
111   Square castling_rook_square(CastlingRights cr) {\cf17 const};\par
112 \par
113   {\cf20 // Checking}\par
114   Bitboard checkers() {\cf17 const};\par
115   Bitboard blockers_for_king(Color c) {\cf17 const};\par
116   Bitboard check_squares(PieceType pt) {\cf17 const};\par
117   Bitboard pinners(Color c) {\cf17 const};\par
118 \par
119   {\cf20 // Attacks to/from a given square}\par
120   Bitboard attackers_to(Square s) {\cf17 const};\par
121   Bitboard attackers_to(Square s, Bitboard occupied) {\cf17 const};\par
122   Bitboard slider_blockers(Bitboard sliders, Square s, Bitboard& pinners) {\cf17 const};\par
123 \par
124   {\cf20 // Properties of moves}\par
125   {\cf18 bool} legal(Move m) {\cf17 const};\par
126   {\cf18 bool} pseudo_legal({\cf17 const} Move m) {\cf17 const};\par
127   {\cf18 bool} capture(Move m) {\cf17 const};\par
128   {\cf18 bool} capture_or_promotion(Move m) {\cf17 const};\par
129   {\cf18 bool} gives_check(Move m) {\cf17 const};\par
130   Piece moved_piece(Move m) {\cf17 const};\par
131   Piece captured_piece() {\cf17 const};\par
132 \par
133   {\cf20 // Piece specific}\par
134   {\cf18 bool} pawn_passed(Color c, Square s) {\cf17 const};\par
135   {\cf18 bool} opposite_bishops() {\cf17 const};\par
136   {\cf18 int}  pawns_on_same_color_squares(Color c, Square s) {\cf17 const};\par
137 \par
138   {\cf20 // Doing and undoing moves}\par
139   {\cf18 void} do_move(Move m, StateInfo& newSt);\par
140   {\cf18 void} do_move(Move m, StateInfo& newSt, {\cf18 bool} givesCheck);\par
141   {\cf18 void} undo_move(Move m);\par
142   {\cf18 void} do_null_move(StateInfo& newSt);\par
143   {\cf18 void} undo_null_move();\par
144 \par
145   {\cf20 // Static Exchange Evaluation}\par
146   {\cf18 bool} see_ge(Move m, Value threshold = VALUE_ZERO) {\cf17 const};\par
147 \par
148   {\cf20 // Accessing hash keys}\par
149   Key key() {\cf17 const};\par
150   Key key_after(Move m) {\cf17 const};\par
151   Key material_key() {\cf17 const};\par
152   Key pawn_key() {\cf17 const};\par
153 \par
154   {\cf20 // Other properties of the position}\par
155   Color side_to_move() {\cf17 const};\par
156   {\cf18 int} game_ply() {\cf17 const};\par
157   {\cf18 bool} is_chess960() {\cf17 const};\par
158   Thread* this_thread() {\cf17 const};\par
159   {\cf18 bool} is_draw({\cf18 int} ply) {\cf17 const};\par
160   {\cf18 bool} has_game_cycle({\cf18 int} ply) {\cf17 const};\par
161   {\cf18 bool} has_repeated() {\cf17 const};\par
162   {\cf18 int} rule50_count() {\cf17 const};\par
163   Score psq_score() {\cf17 const};\par
164   Value non_pawn_material(Color c) {\cf17 const};\par
165   Value non_pawn_material() {\cf17 const};\par
166 \par
167   {\cf20 // Position consistency check, for debugging}\par
168   {\cf18 bool} pos_is_ok() {\cf17 const};\par
169   {\cf18 void} flip();\par
170 \par
171   {\cf20 // Used by NNUE}\par
172   StateInfo* state() {\cf17 const};\par
173 \par
174   {\cf18 void} put_piece(Piece pc, Square s);\par
175   {\cf18 void} remove_piece(Square s);\par
176 \par
177 {\cf17 private}:\par
178   {\cf20 // Initialization helpers (used while setting up a position)}\par
179   {\cf18 void} set_castling_right(Color c, Square rfrom);\par
180   {\cf18 void} set_state(StateInfo* si) {\cf17 const};\par
181   {\cf18 void} set_check_info(StateInfo* si) {\cf17 const};\par
182 \par
183   {\cf20 // Other helpers}\par
184   {\cf18 void} move_piece(Square from, Square to);\par
185   {\cf17 template}<{\cf18 bool} Do>\par
186   {\cf18 void} do_castling(Color us, Square from, Square& to, Square& rfrom, Square& rto);\par
187 \par
188   {\cf20 // Data members}\par
189   Piece board[SQUARE_NB];\par
190   Bitboard byTypeBB[PIECE_TYPE_NB];\par
191   Bitboard byColorBB[COLOR_NB];\par
192   {\cf18 int} pieceCount[PIECE_NB];\par
193   {\cf18 int} castlingRightsMask[SQUARE_NB];\par
194   Square castlingRookSquare[CASTLING_RIGHT_NB];\par
195   Bitboard castlingPath[CASTLING_RIGHT_NB];\par
196   Thread* thisThread;\par
197   StateInfo* st;\par
198   {\cf18 int} gamePly;\par
199   Color sideToMove;\par
200   Score psq;\par
201   {\cf18 bool} chess960;\par
202 \};\par
203 \par
204 {\cf17 extern} std::ostream& operator<<(std::ostream& os, {\cf17 const} Position& pos);\par
205 \par
206 {\cf17 inline} Color Position::side_to_move(){\cf17  const }\{\par
207   {\cf19 return} sideToMove;\par
208 \}\par
209 \par
210 {\cf17 inline} Piece Position::piece_on(Square s){\cf17  const }\{\par
211   assert(is_ok(s));\par
212   {\cf19 return} board[s];\par
213 \}\par
214 \par
215 {\cf17 inline} {\cf18 bool} Position::empty(Square s){\cf17  const }\{\par
216   {\cf19 return} piece_on(s) == NO_PIECE;\par
217 \}\par
218 \par
219 {\cf17 inline} Piece Position::moved_piece(Move m){\cf17  const }\{\par
220   {\cf19 return} piece_on(from_sq(m));\par
221 \}\par
222 \par
223 {\cf17 inline} Bitboard Position::pieces(PieceType pt = ALL_PIECES){\cf17  const }\{\par
224   {\cf19 return} byTypeBB[pt];\par
225 \}\par
226 \par
227 {\cf17 inline} Bitboard Position::pieces(PieceType pt1, PieceType pt2){\cf17  const }\{\par
228   {\cf19 return} pieces(pt1) | pieces(pt2);\par
229 \}\par
230 \par
231 {\cf17 inline} Bitboard Position::pieces(Color c){\cf17  const }\{\par
232   {\cf19 return} byColorBB[c];\par
233 \}\par
234 \par
235 {\cf17 inline} Bitboard Position::pieces(Color c, PieceType pt){\cf17  const }\{\par
236   {\cf19 return} pieces(c) & pieces(pt);\par
237 \}\par
238 \par
239 {\cf17 inline} Bitboard Position::pieces(Color c, PieceType pt1, PieceType pt2){\cf17  const }\{\par
240   {\cf19 return} pieces(c) & (pieces(pt1) | pieces(pt2));\par
241 \}\par
242 \par
243 {\cf17 template}<PieceType Pt> {\cf17 inline} {\cf18 int} Position::count(Color c){\cf17  const }\{\par
244   {\cf19 return} pieceCount[make_piece(c, Pt)];\par
245 \}\par
246 \par
247 {\cf17 template}<PieceType Pt> {\cf17 inline} {\cf18 int} Position::count(){\cf17  const }\{\par
248   {\cf19 return} count<Pt>(WHITE) + count<Pt>(BLACK);\par
249 \}\par
250 \par
251 {\cf17 template}<PieceType Pt> {\cf17 inline} Square Position::square(Color c){\cf17  const }\{\par
252   assert(count<Pt>(c) == 1);\par
253   {\cf19 return} lsb(pieces(c, Pt));\par
254 \}\par
255 \par
256 {\cf17 inline} Square Position::ep_square(){\cf17  const }\{\par
257   {\cf19 return} st->epSquare;\par
258 \}\par
259 \par
260 {\cf17 inline} {\cf18 bool} Position::is_on_semiopen_file(Color c, Square s){\cf17  const }\{\par
261   {\cf19 return} !(pieces(c, PAWN) & file_bb(s));\par
262 \}\par
263 \par
264 {\cf17 inline} {\cf18 bool} Position::can_castle(CastlingRights cr){\cf17  const }\{\par
265   {\cf19 return} st->castlingRights & cr;\par
266 \}\par
267 \par
268 {\cf17 inline} CastlingRights Position::castling_rights(Color c){\cf17  const }\{\par
269   {\cf19 return} c & CastlingRights(st->castlingRights);\par
270 \}\par
271 \par
272 {\cf17 inline} {\cf18 bool} Position::castling_impeded(CastlingRights cr){\cf17  const }\{\par
273   assert(cr == WHITE_OO || cr == WHITE_OOO || cr == BLACK_OO || cr == BLACK_OOO);\par
274 \par
275   {\cf19 return} pieces() & castlingPath[cr];\par
276 \}\par
277 \par
278 {\cf17 inline} Square Position::castling_rook_square(CastlingRights cr){\cf17  const }\{\par
279   assert(cr == WHITE_OO || cr == WHITE_OOO || cr == BLACK_OO || cr == BLACK_OOO);\par
280 \par
281   {\cf19 return} castlingRookSquare[cr];\par
282 \}\par
283 \par
284 {\cf17 inline} Bitboard Position::attackers_to(Square s){\cf17  const }\{\par
285   {\cf19 return} attackers_to(s, pieces());\par
286 \}\par
287 \par
288 {\cf17 inline} Bitboard Position::checkers(){\cf17  const }\{\par
289   {\cf19 return} st->checkersBB;\par
290 \}\par
291 \par
292 {\cf17 inline} Bitboard Position::blockers_for_king(Color c){\cf17  const }\{\par
293   {\cf19 return} st->blockersForKing[c];\par
294 \}\par
295 \par
296 {\cf17 inline} Bitboard Position::pinners(Color c){\cf17  const }\{\par
297   {\cf19 return} st->pinners[c];\par
298 \}\par
299 \par
300 {\cf17 inline} Bitboard Position::check_squares(PieceType pt){\cf17  const }\{\par
301   {\cf19 return} st->checkSquares[pt];\par
302 \}\par
303 \par
304 {\cf17 inline} {\cf18 bool} Position::pawn_passed(Color c, Square s){\cf17  const }\{\par
305   {\cf19 return} !(pieces(~c, PAWN) & passed_pawn_span(c, s));\par
306 \}\par
307 \par
308 {\cf17 inline} {\cf18 int} Position::pawns_on_same_color_squares(Color c, Square s){\cf17  const }\{\par
309   {\cf19 return} popcount(pieces(c, PAWN) & ((DarkSquares & s) ? DarkSquares : ~DarkSquares));\par
310 \}\par
311 \par
312 {\cf17 inline} Key Position::key(){\cf17  const }\{\par
313   {\cf19 return} st->rule50 < 14 ? st->key\par
314                          : st->key ^ make_key((st->rule50 - 14) / 8);\par
315 \}\par
316 \par
317 {\cf17 inline} Key Position::pawn_key(){\cf17  const }\{\par
318   {\cf19 return} st->pawnKey;\par
319 \}\par
320 \par
321 {\cf17 inline} Key Position::material_key(){\cf17  const }\{\par
322   {\cf19 return} st->materialKey;\par
323 \}\par
324 \par
325 {\cf17 inline} Score Position::psq_score(){\cf17  const }\{\par
326   {\cf19 return} psq;\par
327 \}\par
328 \par
329 {\cf17 inline} Value Position::non_pawn_material(Color c){\cf17  const }\{\par
330   {\cf19 return} st->nonPawnMaterial[c];\par
331 \}\par
332 \par
333 {\cf17 inline} Value Position::non_pawn_material(){\cf17  const }\{\par
334   {\cf19 return} non_pawn_material(WHITE) + non_pawn_material(BLACK);\par
335 \}\par
336 \par
337 {\cf17 inline} {\cf18 int} Position::game_ply(){\cf17  const }\{\par
338   {\cf19 return} gamePly;\par
339 \}\par
340 \par
341 {\cf17 inline} {\cf18 int} Position::rule50_count(){\cf17  const }\{\par
342   {\cf19 return} st->rule50;\par
343 \}\par
344 \par
345 {\cf17 inline} {\cf18 bool} Position::opposite_bishops(){\cf17  const }\{\par
346   {\cf19 return}   count<BISHOP>(WHITE) == 1\par
347         && count<BISHOP>(BLACK) == 1\par
348         && opposite_colors(square<BISHOP>(WHITE), square<BISHOP>(BLACK));\par
349 \}\par
350 \par
351 {\cf17 inline} {\cf18 bool} Position::is_chess960(){\cf17  const }\{\par
352   {\cf19 return} chess960;\par
353 \}\par
354 \par
355 {\cf17 inline} {\cf18 bool} Position::capture_or_promotion(Move m){\cf17  const }\{\par
356   assert(is_ok(m));\par
357   {\cf19 return} type_of(m) != NORMAL ? type_of(m) != CASTLING : !empty(to_sq(m));\par
358 \}\par
359 \par
360 {\cf17 inline} {\cf18 bool} Position::capture(Move m){\cf17  const }\{\par
361   assert(is_ok(m));\par
362   {\cf20 // Castling is encoded as "king captures rook"}\par
363   {\cf19 return} (!empty(to_sq(m)) && type_of(m) != CASTLING) || type_of(m) == EN_PASSANT;\par
364 \}\par
365 \par
366 {\cf17 inline} Piece Position::captured_piece(){\cf17  const }\{\par
367   {\cf19 return} st->capturedPiece;\par
368 \}\par
369 \par
370 {\cf17 inline} Thread* Position::this_thread(){\cf17  const }\{\par
371   {\cf19 return} thisThread;\par
372 \}\par
373 \par
374 {\cf17 inline} {\cf18 void} Position::put_piece(Piece pc, Square s) \{\par
375 \par
376   board[s] = pc;\par
377   byTypeBB[ALL_PIECES] |= byTypeBB[type_of(pc)] |= s;\par
378   byColorBB[color_of(pc)] |= s;\par
379   pieceCount[pc]++;\par
380   pieceCount[make_piece(color_of(pc), ALL_PIECES)]++;\par
381   psq += PSQT::psq[pc][s];\par
382 \}\par
383 \par
384 {\cf17 inline} {\cf18 void} Position::remove_piece(Square s) \{\par
385 \par
386   Piece pc = board[s];\par
387   byTypeBB[ALL_PIECES] ^= s;\par
388   byTypeBB[type_of(pc)] ^= s;\par
389   byColorBB[color_of(pc)] ^= s;\par
390   board[s] = NO_PIECE;\par
391   pieceCount[pc]--;\par
392   pieceCount[make_piece(color_of(pc), ALL_PIECES)]--;\par
393   psq -= PSQT::psq[pc][s];\par
394 \}\par
395 \par
396 {\cf17 inline} {\cf18 void} Position::move_piece(Square from, Square to) \{\par
397 \par
398   Piece pc = board[from];\par
399   Bitboard fromTo = from | to;\par
400   byTypeBB[ALL_PIECES] ^= fromTo;\par
401   byTypeBB[type_of(pc)] ^= fromTo;\par
402   byColorBB[color_of(pc)] ^= fromTo;\par
403   board[from] = NO_PIECE;\par
404   board[to] = pc;\par
405   psq += PSQT::psq[pc][to] - PSQT::psq[pc][from];\par
406 \}\par
407 \par
408 {\cf17 inline} {\cf18 void} Position::do_move(Move m, StateInfo& newSt) \{\par
409   do_move(m, newSt, gives_check(m));\par
410 \}\par
411 \par
412 {\cf17 inline} StateInfo* Position::state(){\cf17  const }\{\par
413 \par
414   {\cf19 return} st;\par
415 \}\par
416 \par
417 \} {\cf20 // namespace Stockfish}\par
418 \par
419 {\cf21 #endif }{\cf20 // #ifndef POSITION_H_INCLUDED}\par
}
}