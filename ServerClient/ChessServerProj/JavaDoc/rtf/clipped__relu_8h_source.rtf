{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
clipped_relu.h\par \pard\plain 
{\tc\tcl2 \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/nnue/layers/clipped_relu.h}
{\xe \v assets/Stockfish/stockfish_14.1_win_x64_avx2/stockfish_14.1_src/src/nnue/layers/clipped_relu.h}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 /*}\par
2 {\cf20   Stockfish, a UCI chess playing engine derived from Glaurung 2.1}\par
3 {\cf20   Copyright (C) 2004-2021 The Stockfish developers (see AUTHORS file)}\par
4 {\cf20 }\par
5 {\cf20   Stockfish is free software: you can redistribute it and/or modify}\par
6 {\cf20   it under the terms of the GNU General Public License as published by}\par
7 {\cf20   the Free Software Foundation, either version 3 of the License, or}\par
8 {\cf20   (at your option) any later version.}\par
9 {\cf20 }\par
10 {\cf20   Stockfish is distributed in the hope that it will be useful,}\par
11 {\cf20   but WITHOUT ANY WARRANTY; without even the implied warranty of}\par
12 {\cf20   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the}\par
13 {\cf20   GNU General Public License for more details.}\par
14 {\cf20 }\par
15 {\cf20   You should have received a copy of the GNU General Public License}\par
16 {\cf20   along with this program.  If not, see <http://www.gnu.org/licenses/>.}\par
17 {\cf20 */}\par
18 \par
19 {\cf20 // Definition of layer ClippedReLU of NNUE evaluation function}\par
20 \par
21 {\cf21 #ifndef NNUE_LAYERS_CLIPPED_RELU_H_INCLUDED}\par
22 {\cf21 #define NNUE_LAYERS_CLIPPED_RELU_H_INCLUDED}\par
23 \par
24 {\cf21 #include "../nnue_common.h"}\par
25 \par
26 {\cf17 namespace }Stockfish::Eval::NNUE::Layers \{\par
27 \par
28   {\cf20 // Clipped ReLU}\par
29   {\cf17 template} <{\cf17 typename} PreviousLayer>\par
30   {\cf17 class }ClippedReLU \{\par
31    {\cf17 public}:\par
32     {\cf20 // Input/output type}\par
33     {\cf17 using} InputType = {\cf17 typename} PreviousLayer::OutputType;\par
34     {\cf17 using} OutputType = std::uint8_t;\par
35     {\cf17 static_assert}(std::is_same<InputType, std::int32_t>::value, {\cf22 ""});\par
36 \par
37     {\cf20 // Number of input/output dimensions}\par
38     {\cf17 static} {\cf17 constexpr} IndexType InputDimensions = PreviousLayer::OutputDimensions;\par
39     {\cf17 static} {\cf17 constexpr} IndexType OutputDimensions = InputDimensions;\par
40     {\cf17 static} {\cf17 constexpr} IndexType PaddedOutputDimensions =\par
41         ceil_to_multiple<IndexType>(OutputDimensions, 32);\par
42 \par
43     {\cf20 // Size of forward propagation buffer used in this layer}\par
44     {\cf17 static} {\cf17 constexpr} std::size_t SelfBufferSize =\par
45         ceil_to_multiple(OutputDimensions * {\cf17 sizeof}(OutputType), CacheLineSize);\par
46 \par
47     {\cf20 // Size of the forward propagation buffer used from the input layer to this layer}\par
48     {\cf17 static} {\cf17 constexpr} std::size_t BufferSize =\par
49         PreviousLayer::BufferSize + SelfBufferSize;\par
50 \par
51     {\cf20 // Hash value embedded in the evaluation file}\par
52     {\cf17 static} {\cf17 constexpr} std::uint32_t get_hash_value() \{\par
53       std::uint32_t hashValue = 0x538D24C7u;\par
54       hashValue += PreviousLayer::get_hash_value();\par
55       {\cf19 return} hashValue;\par
56     \}\par
57 \par
58     {\cf20 // Read network parameters}\par
59     {\cf18 bool} read_parameters(std::istream& stream) \{\par
60       {\cf19 return} previousLayer.read_parameters(stream);\par
61     \}\par
62 \par
63     {\cf20 // Write network parameters}\par
64     {\cf18 bool} write_parameters(std::ostream& stream){\cf17  const }\{\par
65       {\cf19 return} previousLayer.write_parameters(stream);\par
66     \}\par
67 \par
68     {\cf20 // Forward propagation}\par
69     {\cf17 const} OutputType* propagate(\par
70         {\cf17 const} TransformedFeatureType* transformedFeatures, {\cf18 char}* buffer){\cf17  const }\{\par
71       {\cf17 const} {\cf17 auto} input = previousLayer.propagate(\par
72           transformedFeatures, buffer + SelfBufferSize);\par
73       {\cf17 const} {\cf17 auto} output = {\cf17 reinterpret_cast<}OutputType*{\cf17 >}(buffer);\par
74 \par
75 {\cf21   #if defined(USE_AVX2)}\par
76       {\cf19 if} {\cf17 constexpr} (InputDimensions % SimdWidth == 0) \{\par
77         {\cf17 constexpr} IndexType NumChunks = InputDimensions / SimdWidth;\par
78         {\cf17 const} __m256i Zero = _mm256_setzero_si256();\par
79         {\cf17 const} __m256i Offsets = _mm256_set_epi32(7, 3, 6, 2, 5, 1, 4, 0);\par
80         {\cf17 const} {\cf17 auto} in = {\cf17 reinterpret_cast<}{\cf17 const }__m256i*{\cf17 >}(input);\par
81         {\cf17 const} {\cf17 auto} out = {\cf17 reinterpret_cast<}__m256i*{\cf17 >}(output);\par
82         {\cf19 for} (IndexType i = 0; i < NumChunks; ++i) \{\par
83           {\cf17 const} __m256i words0 = _mm256_srai_epi16(_mm256_packs_epi32(\par
84               _mm256_load_si256(&in[i * 4 + 0]),\par
85               _mm256_load_si256(&in[i * 4 + 1])), WeightScaleBits);\par
86           {\cf17 const} __m256i words1 = _mm256_srai_epi16(_mm256_packs_epi32(\par
87               _mm256_load_si256(&in[i * 4 + 2]),\par
88               _mm256_load_si256(&in[i * 4 + 3])), WeightScaleBits);\par
89           _mm256_store_si256(&out[i], _mm256_permutevar8x32_epi32(_mm256_max_epi8(\par
90               _mm256_packs_epi16(words0, words1), Zero), Offsets));\par
91         \}\par
92       \} {\cf19 else} \{\par
93         {\cf17 constexpr} IndexType NumChunks = InputDimensions / (SimdWidth / 2);\par
94         {\cf17 const} __m128i Zero = _mm_setzero_si128();\par
95         {\cf17 const} {\cf17 auto} in = {\cf17 reinterpret_cast<}{\cf17 const }__m128i*{\cf17 >}(input);\par
96         {\cf17 const} {\cf17 auto} out = {\cf17 reinterpret_cast<}__m128i*{\cf17 >}(output);\par
97         {\cf19 for} (IndexType i = 0; i < NumChunks; ++i) \{\par
98           {\cf17 const} __m128i words0 = _mm_srai_epi16(_mm_packs_epi32(\par
99               _mm_load_si128(&in[i * 4 + 0]),\par
100               _mm_load_si128(&in[i * 4 + 1])), WeightScaleBits);\par
101           {\cf17 const} __m128i words1 = _mm_srai_epi16(_mm_packs_epi32(\par
102               _mm_load_si128(&in[i * 4 + 2]),\par
103               _mm_load_si128(&in[i * 4 + 3])), WeightScaleBits);\par
104           {\cf17 const} __m128i packedbytes = _mm_packs_epi16(words0, words1);\par
105           _mm_store_si128(&out[i], _mm_max_epi8(packedbytes, Zero));\par
106         \}\par
107       \}\par
108       {\cf17 constexpr} IndexType Start =\par
109         InputDimensions % SimdWidth == 0\par
110         ? InputDimensions / SimdWidth * SimdWidth\par
111         : InputDimensions / (SimdWidth / 2) * (SimdWidth / 2);\par
112 \par
113 {\cf21   #elif defined(USE_SSE2)}\par
114       {\cf17 constexpr} IndexType NumChunks = InputDimensions / SimdWidth;\par
115 \par
116 {\cf21   #ifdef USE_SSE41}\par
117       {\cf17 const} __m128i Zero = _mm_setzero_si128();\par
118 {\cf21   #else}\par
119       {\cf17 const} __m128i k0x80s = _mm_set1_epi8(-128);\par
120 {\cf21   #endif}\par
121 \par
122       {\cf17 const} {\cf17 auto} in = {\cf17 reinterpret_cast<}{\cf17 const }__m128i*{\cf17 >}(input);\par
123       {\cf17 const} {\cf17 auto} out = {\cf17 reinterpret_cast<}__m128i*{\cf17 >}(output);\par
124       {\cf19 for} (IndexType i = 0; i < NumChunks; ++i) \{\par
125         {\cf17 const} __m128i words0 = _mm_srai_epi16(_mm_packs_epi32(\par
126             _mm_load_si128(&in[i * 4 + 0]),\par
127             _mm_load_si128(&in[i * 4 + 1])), WeightScaleBits);\par
128         {\cf17 const} __m128i words1 = _mm_srai_epi16(_mm_packs_epi32(\par
129             _mm_load_si128(&in[i * 4 + 2]),\par
130             _mm_load_si128(&in[i * 4 + 3])), WeightScaleBits);\par
131         {\cf17 const} __m128i packedbytes = _mm_packs_epi16(words0, words1);\par
132         _mm_store_si128(&out[i],\par
133 \par
134   #ifdef USE_SSE41\par
135           _mm_max_epi8(packedbytes, Zero)\par
136   #{\cf19 else}\par
137           _mm_subs_epi8(_mm_adds_epi8(packedbytes, k0x80s), k0x80s)\par
138   #endif\par
139 \par
140         );\par
141       \}\par
142       {\cf17 constexpr} IndexType Start = NumChunks * SimdWidth;\par
143 \par
144 {\cf21   #elif defined(USE_MMX)}\par
145       {\cf17 constexpr} IndexType NumChunks = InputDimensions / SimdWidth;\par
146       {\cf17 const} __m64 k0x80s = _mm_set1_pi8(-128);\par
147       {\cf17 const} {\cf17 auto} in = {\cf17 reinterpret_cast<}{\cf17 const }__m64*{\cf17 >}(input);\par
148       {\cf17 const} {\cf17 auto} out = {\cf17 reinterpret_cast<}__m64*{\cf17 >}(output);\par
149       {\cf19 for} (IndexType i = 0; i < NumChunks; ++i) \{\par
150         {\cf17 const} __m64 words0 = _mm_srai_pi16(\par
151             _mm_packs_pi32(in[i * 4 + 0], in[i * 4 + 1]),\par
152             WeightScaleBits);\par
153         {\cf17 const} __m64 words1 = _mm_srai_pi16(\par
154             _mm_packs_pi32(in[i * 4 + 2], in[i * 4 + 3]),\par
155             WeightScaleBits);\par
156         {\cf17 const} __m64 packedbytes = _mm_packs_pi16(words0, words1);\par
157         out[i] = _mm_subs_pi8(_mm_adds_pi8(packedbytes, k0x80s), k0x80s);\par
158       \}\par
159       _mm_empty();\par
160       {\cf17 constexpr} IndexType Start = NumChunks * SimdWidth;\par
161 \par
162 {\cf21   #elif defined(USE_NEON)}\par
163       {\cf17 constexpr} IndexType NumChunks = InputDimensions / (SimdWidth / 2);\par
164       {\cf17 const} int8x8_t Zero = \{0\};\par
165       {\cf17 const} {\cf17 auto} in = {\cf17 reinterpret_cast<}{\cf17 const }int32x4_t*{\cf17 >}(input);\par
166       {\cf17 const} {\cf17 auto} out = {\cf17 reinterpret_cast<}int8x8_t*{\cf17 >}(output);\par
167       {\cf19 for} (IndexType i = 0; i < NumChunks; ++i) \{\par
168         int16x8_t shifted;\par
169         {\cf17 const} {\cf17 auto} pack = {\cf17 reinterpret_cast<}int16x4_t*{\cf17 >}(&shifted);\par
170         pack[0] = vqshrn_n_s32(in[i * 2 + 0], WeightScaleBits);\par
171         pack[1] = vqshrn_n_s32(in[i * 2 + 1], WeightScaleBits);\par
172         out[i] = vmax_s8(vqmovn_s16(shifted), Zero);\par
173       \}\par
174       {\cf17 constexpr} IndexType Start = NumChunks * (SimdWidth / 2);\par
175 {\cf21   #else}\par
176       {\cf17 constexpr} IndexType Start = 0;\par
177 {\cf21   #endif}\par
178 \par
179       {\cf19 for} (IndexType i = Start; i < InputDimensions; ++i) \{\par
180         output[i] = {\cf17 static_cast<}OutputType{\cf17 >}(\par
181             std::max(0, std::min(127, input[i] >> WeightScaleBits)));\par
182       \}\par
183 \par
184       {\cf20 // Affine transform layers expect that there is at least}\par
185       {\cf20 // ceil_to_multiple(OutputDimensions, 32) initialized values.}\par
186       {\cf20 // We cannot do this in the affine transform because it requires}\par
187       {\cf20 // preallocating space here.}\par
188       {\cf19 for} (IndexType i = OutputDimensions; i < PaddedOutputDimensions; ++i) \{\par
189         output[i] = 0;\par
190       \}\par
191 \par
192       {\cf19 return} output;\par
193     \}\par
194 \par
195    {\cf17 private}:\par
196     PreviousLayer previousLayer;\par
197   \};\par
198 \par
199 \}  {\cf20 // namespace Stockfish::Eval::NNUE::Layers}\par
200 \par
201 {\cf21 #endif }{\cf20 // NNUE_LAYERS_CLIPPED_RELU_H_INCLUDED}\par
}
}